		//0x0230		VoC_code_section_1
		//0x0230		Coolsand_SBC2PCM_DECODE
0x6C1DDFE9,	//0x0230		VoC_bez16_d(SBC_DEC_ALREADY_RESET,0x4001)(lo)	|	VoC_push16(RA,DEFAULT)
0xFF444001,	//0x0232		VoC_lw32z(ACC0,DEFAULT)	|	VoC_bez16_d(SBC_DEC_ALREADY_RESET,0x4001)(hi)
0x7FFF0A8A,	//0x0234		VoC_lw16i(ACC1_LO,0x7fff)
0x7FFF0A8B,	//0x0236		VoC_lw16i(ACC1_HI,0x7fff)
0x0EEE1808,	//0x0238		VoC_lw16i_set_inc(REG0,0xeee,0x2)
0x63421805,	//0x023a		VoC_lw16i_set_inc(REG1,0x6342,0x1)
0x5078180A,	//0x023c		VoC_lw16i_set_inc(REG2,0x5078,0x2)
0x02462C11,	//0x023e		VoC_loop_i(0x1,0x8)
0x02422C8C,	//0x0240		VoC_loop_i(0x0,0x46)
		//0x0242		VoC_endloop0
0x2C14DDC4,	//0x0242		VoC_loop_i(0x0,0xa)(lo)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xDDD40245,	//0x0244		VoC_sw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_loop_i(0x0,0xa)(hi)
		//0x0245		VoC_endloop0
		//0x0246		VoC_endloop1
0x1585DC98,	//0x0246		VoC_sw32_d(ACC1,0x634a)(lo)	|	VoC_sw16inc_p(ACC0_LO,REG1,DEFAULT)
0x1508634A,	//0x0248		VoC_sw16_d(ACC0_LO,0x4ce8)(lo)	|	VoC_sw32_d(ACC1,0x634a)(hi)
0x15084CE8,	//0x024a		VoC_sw16_d(ACC0_LO,0x4001)(lo)	|	VoC_sw16_d(ACC0_LO,0x4ce8)(hi)
0xFFC04001,	//0x024c		VoC_NAD	|	VoC_sw16_d(ACC0_LO,0x4001)(hi)
		//0x024e		SBC_DEC_ALREADY_RESET
0x404A1404,	//0x024e		VoC_lw16_d(REG4,0x404a)
0x48880A80,	//0x0250		VoC_lw16i(REG0,0x4888)
0x40601504,	//0x0252		VoC_sw16_d(REG4,0x4060)
0x0A85F914,	//0x0254		VoC_lw16i(REG5,0x2444)(lo)	|	VoC_shru16_ri(REG4,0x2,DEFAULT)
0x14842444,	//0x0256		VoC_lw32_d(ACC0,0x4004)(lo)	|	VoC_lw16i(REG5,0x2444)(hi)
0x15004004,	//0x0258		VoC_sw16_d(REG0,0x404c)(lo)	|	VoC_lw32_d(ACC0,0x4004)(hi)
0x15C2404C,	//0x025a		VoC_sw32_d(REG45,0xffc2)(lo)	|	VoC_sw16_d(REG0,0x404c)(hi)
0x15C47FC2,	//0x025c		VoC_sw32_d(ACC0,0xffc4)(lo)	|	VoC_sw32_d(REG45,0xffc2)(hi)
0xDE807FC4,	//0x025e		VoC_cfg(0x0)	|	VoC_sw32_d(ACC0,0xffc4)(hi)
0x1794FFC0,	//0x0260		VoC_cfg_lg(0x8,)(lo)	|	VoC_NOP
0x701B0008,	//0x0262		VoC_lw16i_short(BITCACHE,0x0,DEFAULT)	|	VoC_cfg_lg(0x8,)(hi)
0x1807FF46,	//0x0264		VoC_lw16i_set_inc(REG3,0x4888,0x1)(lo)	|	VoC_lw32z(RL6,IN_PARALLEL)
0xF0064888,	//0x0266		VoC_lw16i_short(REG6,0x0,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x4888,0x1)(hi)
0x404E1586,	//0x0268		VoC_sw32_d(RL6,0x404e)
0x40621506,	//0x026a		VoC_sw16_d(REG6,0x4062)
0x405D1506,	//0x026c		VoC_sw16_d(REG6,0x405d)
0x0AFC2B80,	//0x026e		VoC_jal(sbc_calculate_band_info_init)
0x7101F020,	//0x0270		VoC_lw16i_short(REG1,0x8,DEFAULT)	|	VoC_lw16i_short(REG0,0x1,DEFAULT)
0x4428E085,	//0x0272		VoC_bne16_rd(SBC_DEC_RAM_X_EXTER_WRONG,REG0,0x80)(lo)	|	VoC_lw16i_short(REG5,0x8,IN_PARALLEL)
0x44190080,	//0x0274		VoC_bne16_rd(SBC_DEC_RAM_X_EXTER_WRONG,REG1,0x83)(lo)	|	VoC_bne16_rd(SBC_DEC_RAM_X_EXTER_WRONG,REG0,0x80)(hi)
0xE5C50083,	//0x0276		VoC_jump(SBC_DEC_START_DECODE)	|	VoC_bne16_rd(SBC_DEC_RAM_X_EXTER_WRONG,REG1,0x83)(hi)
		//0x0278		SBC_DEC_RAM_X_EXTER_WRONG
0x401D1505,	//0x0278		VoC_sw16_d(REG5,0x401d)
0x03542B00,	//0x027a		VoC_jump_lg(SBC_DECODE_END)
		//0x027c		SBC_DEC_START_DECODE
0x05582B80,	//0x027c		VoC_jal(sbc_unpack_frame)
0x401D6C04,	//0x027e		VoC_bez16_d(SBC_DEC_UNPACK_NO_ERROR,0x401d)
0x03542B00,	//0x0280		VoC_jump_lg(SBC_DECODE_END)
		//0x0282		SBC_DEC_UNPACK_NO_ERROR
0x06BD2B80,	//0x0282		VoC_jal(sbc_decoder_init)
0x0B062B80,	//0x0284		VoC_jal(sbc_calculate_band_info)
0x0AAC2B80,	//0x0286		VoC_jal(sbc_synthesize_audio)
0x0B582B80,	//0x0288		VoC_jal(sbc_mixing_audio)
0x0B912B80,	//0x028a		VoC_jal(sbc_detect_mute)
0x7101F020,	//0x028c		VoC_lw16i_short(REG1,0x8,DEFAULT)	|	VoC_lw16i_short(REG0,0x1,DEFAULT)
0x4428E085,	//0x028e		VoC_bne16_rd(SBC_DEC_RAM_X_INTER_WRONG,REG0,0x80)(lo)	|	VoC_lw16i_short(REG5,0x8,IN_PARALLEL)
0x44190080,	//0x0290		VoC_bne16_rd(SBC_DEC_RAM_X_INTER_WRONG,REG1,0x83)(lo)	|	VoC_bne16_rd(SBC_DEC_RAM_X_INTER_WRONG,REG0,0x80)(hi)
0xE5C50083,	//0x0292		VoC_jump(SBC_DEC_CHECK_DATA_OUT_ADDR)	|	VoC_bne16_rd(SBC_DEC_RAM_X_INTER_WRONG,REG1,0x83)(hi)
		//0x0294		SBC_DEC_RAM_X_INTER_WRONG
0x401D1505,	//0x0294		VoC_sw16_d(REG5,0x401d)
0x03542B00,	//0x0296		VoC_jump_lg(SBC_DECODE_END)
		//0x0298		SBC_DEC_CHECK_DATA_OUT_ADDR
0x40061480,	//0x0298		VoC_lw32_d(REG01,0x4006)
0x6028F125,	//0x029a		VoC_blt32_rd(SBC_DEC_OUT_PCM_ADDR_WRONG,REG01,0x4ce2)(lo)	|	VoC_lw16i_short(REG5,0x9,DEFAULT)
0x50184CE2,	//0x029c		VoC_bgt32_rd(SBC_DEC_OUT_PCM_ADDR_WRONG,REG01,0x4ce4)(lo)	|	VoC_blt32_rd(SBC_DEC_OUT_PCM_ADDR_WRONG,REG01,0x4ce2)(hi)
0xE5C54CE4,	//0x029e		VoC_jump(SBC_DEC_CHECK_DATA_OUT_LENGTH)	|	VoC_bgt32_rd(SBC_DEC_OUT_PCM_ADDR_WRONG,REG01,0x4ce4)(hi)
		//0x02a0		SBC_DEC_OUT_PCM_ADDR_WRONG
0x401D1505,	//0x02a0		VoC_sw16_d(REG5,0x401d)
0x03542B00,	//0x02a2		VoC_jump_lg(SBC_DECODE_END)
		//0x02a4		SBC_DEC_CHECK_DATA_OUT_LENGTH
0x405E1404,	//0x02a4		VoC_lw16_d(REG4,0x405e)
0x00800A80,	//0x02a6		VoC_lw16i(REG0,0x80)
0x033C3420,	//0x02a8		VoC_bgt16_rr(SBC_DEC_WRONG_DATA_LEN,REG4,REG0)
0x033C3204,	//0x02aa		VoC_bltz16_r(SBC_DEC_WRONG_DATA_LEN,REG4)
0x21540A85,	//0x02ac		VoC_lw16i(REG5,0x2154)
0xF5787040,	//0x02ae		VoC_lw16i_short(FORMAT16,0xffffffef,IN_PARALLEL)	|	VoC_lw16i_short(REG0,0x2,DEFAULT)
0x40524430,	//0x02b0		VoC_bne16_rd(SBC_44_1K_TO_48K_freq_no_44_1,REG0,0x4052)
0x40564420,	//0x02b2		VoC_bne16_rd(SBC_44_1K_TO_48K_freq_no_44_1,REG0,0x4056)
0x4CF06E12,	//0x02b4		VoC_bnez16_d(SBC_44_1K_TO_48K_START,0x4cf0)
		//0x02b6		SBC_44_1K_TO_48K_freq_no_44_1
0x406208A6,	//0x02b6		VoC_multf16_rd(REG6,REG4,0x4062)
0x51AA1808,	//0x02b8		VoC_lw16i_set_inc(REG0,0x51aa,0x2)
0x42A81809,	//0x02ba		VoC_lw16i_set_inc(REG1,0x42a8,0x2)
0xF4004030,	//0x02bc		VoC_lw16i_short(FORMAT16,0x0,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG6,DEFAULT)
0x2E20D9CC,	//0x02be		VoC_loop_r(0,REG4)(lo)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xD9CC02C2,	//0x02c0		VoC_lw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_loop_r(0,REG4)(hi)
		//0x02c2		VoC_endloop0
0x2B00DDC4,	//0x02c2		VoC_jump_lg(SBC_44_1K_TO_48K_END)(lo)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
0xFFC0033A,	//0x02c4		VoC_NAD	|	VoC_jump_lg(SBC_44_1K_TO_48K_END)(hi)
		//0x02c6		SBC_44_1K_TO_48K_START
0x4CEC1504,	//0x02c6		VoC_sw16_d(REG4,0x4cec)
0x0BAA2B80,	//0x02c8		VoC_jal(sbc_44_1k_to_48k_filter)
0x4CE86E0E,	//0x02ca		VoC_bnez16_d(SBC_44_1K_TO_48K_SET_DMA_OUT_LENGTH_OK,0x4ce8)
0x008007B6,	//0x02cc		VoC_sub16_rd(REG6,REG6,0x80)
0x008B0A80,	//0x02ce		VoC_lw16i(REG0,0x8b)
0x4CEA1506,	//0x02d0		VoC_sw16_d(REG6,0x4cea)
0x033C3430,	//0x02d2		VoC_bgt16_rr(SBC_DEC_WRONG_DATA_LEN,REG6,REG0)
0x033C3206,	//0x02d4		VoC_bltz16_r(SBC_DEC_WRONG_DATA_LEN,REG6)
0x4CE81506,	//0x02d6		VoC_sw16_d(REG6,0x4ce8)
		//0x02d8		SBC_44_1K_TO_48K_SET_DMA_OUT_LENGTH_OK
0x4D1A1808,	//0x02d8		VoC_lw16i_set_inc(REG0,0x4d1a,0x2)
0x4E341809,	//0x02da		VoC_lw16i_set_inc(REG1,0x4e34,0x2)
0x4E331402,	//0x02dc		VoC_lw16_d(REG2,0x4e33)
0xC051F8FA,	//0x02de		VoC_add16_rr(REG1,REG1,REG2,DEFAULT)	|	VoC_shr16_ri(REG2,0xffffffff,DEFAULT)
0x405E1402,	//0x02e0		VoC_lw16_d(REG2,0x405e)
0x4E330713,	//0x02e2		VoC_add16_rd(REG3,REG2,0x4e33)
0x1503D9C4,	//0x02e4		VoC_sw16_d(REG3,0x4e33)(lo)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0x2E104E33,	//0x02e6		VoC_loop_r(0,REG2)(lo)	|	VoC_sw16_d(REG3,0x4e33)(hi)
0xD9C402EA,	//0x02e8		VoC_lw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_loop_r(0,REG2)(hi)
		//0x02ea		VoC_endloop0
0x1407DDCC,	//0x02ea		VoC_lw16_d(REG7,0x4cea)(lo)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xF8FF4CEA,	//0x02ec		VoC_shr16_ri(REG7,0xffffffff,DEFAULT)	|	VoC_lw16_d(REG7,0x4cea)(hi)
0x4E333C27,	//0x02ee		VoC_bngt16_rd(SBC_44_1K_TO_48K_DMA_START,REG7,0x4e33)
0x031E2B00,	//0x02f0		VoC_jump_lg(SBC_44_1K_TO_48K_DMA_END)
		//0x02f2		SBC_44_1K_TO_48K_DMA_START
0x40621406,	//0x02f2		VoC_lw16_d(REG6,0x4062)
0x4E341809,	//0x02f4		VoC_lw16i_set_inc(REG1,0x4e34,0x2)
0x51AA1808,	//0x02f6		VoC_lw16i_set_inc(REG0,0x51aa,0x2)
0xF6E445BD,	//0x02f8		VoC_movreg16(REG4,REG7,IN_PARALLEL)	|	VoC_mult16_rr(REG5,REG6,REG7,DEFAULT)
0xF00A407A,	//0x02fa		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG1,REG7,DEFAULT)
0x4028F80F,	//0x02fc		VoC_add16_rr(REG0,REG0,REG5,DEFAULT)	|	VoC_shr16_ri(REG7,0x1,DEFAULT)
0x2E38F8FC,	//0x02fe		VoC_loop_r(0,REG7)(lo)	|	VoC_shr16_ri(REG4,0xffffffff,IN_PARALLEL)
0xD98C0304,	//0x0300		VoC_lw32_p(ACC0,REG1,DEFAULT)	|	VoC_loop_r(0,REG7)(hi)
0xDDC4D9D5,	//0x0302		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC1,REG2,DEFAULT)
		//0x0304		VoC_endloop0
0x0B3DDDCD,	//0x0304		VoC_sub16_dr(REG5,0x4e33,REG7)(lo)	|	VoC_sw32inc_p(ACC1,REG1,DEFAULT)
0xC37F4E33,	//0x0306		VoC_sub16_rr(REG7,REG5,REG7,DEFAULT)	|	VoC_sub16_dr(REG5,0x4e33,REG7)(hi)
0x03103147,	//0x0308		VoC_bngtz16_r(SBC_44_1K_TO_48K_NO_MORE_REMIAN_COPY,REG7)
0x2E38D9D5,	//0x030a		VoC_loop_r(0,REG7)(lo)	|	VoC_lw32inc_p(ACC1,REG2,DEFAULT)
0xD9D5030E,	//0x030c		VoC_lw32inc_p(ACC1,REG2,DEFAULT)	|	VoC_loop_r(0,REG7)(hi)
		//0x030e		VoC_endloop0
0xFFC05DCD,	//0x030e		VoC_NAD(IN_PARALLEL)	|	VoC_sw32inc_p(ACC1,REG1,DEFAULT)
		//0x0310		SBC_44_1K_TO_48K_NO_MORE_REMIAN_COPY
0x404E0724,	//0x0310		VoC_add16_rd(REG4,REG4,0x404e)
0x00800736,	//0x0312		VoC_add16_rd(REG6,REG6,0x80)
0x4E331505,	//0x0314		VoC_sw16_d(REG5,0x4e33)
0x404E1504,	//0x0316		VoC_sw16_d(REG4,0x404e)
0x40621506,	//0x0318		VoC_sw16_d(REG6,0x4062)
0x00834426,	//0x031a		VoC_bne16_rd(SBC_44_1K_TO_48K_DMA_END,REG6,0x83)
0x03542B00,	//0x031c		VoC_jump_lg(SBC_DECODE_END)
		//0x031e		SBC_44_1K_TO_48K_DMA_END
0x4CEA1404,	//0x031e		VoC_lw16_d(REG4,0x4cea)
0x4E341809,	//0x0320		VoC_lw16i_set_inc(REG1,0x4e34,0x2)
0x51AA1808,	//0x0322		VoC_lw16i_set_inc(REG0,0x51aa,0x2)
0x08A6F5F8,	//0x0324		VoC_multf16_rd(REG6,REG4,0x4062)(lo)	|	VoC_lw16i_short(FORMAT16,0xffffffef,DEFAULT)
0x0B254062,	//0x0326		VoC_sub16_dr(REG5,0x4e33,REG4)(lo)	|	VoC_multf16_rd(REG6,REG4,0x4062)(hi)
0x40304E33,	//0x0328		VoC_add16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_sub16_dr(REG5,0x4e33,REG4)(hi)
0xD9CCF400,	//0x032a		VoC_lw32inc_p(ACC0,REG1,DEFAULT)	|	VoC_lw16i_short(FORMAT16,0x0,IN_PARALLEL)
0x4E331505,	//0x032c		VoC_sw16_d(REG5,0x4e33)
0x03312E20,	//0x032e		VoC_loop_r(0,REG4)
0xDDC4D9CC,	//0x0330		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
		//0x0331		VoC_endloop0
0x033A3185,	//0x0332		VoC_bez16_r(SBC_44_1K_TO_48K_END,REG5)
0x4E341808,	//0x0334		VoC_lw16i_set_inc(REG0,0x4e34,0x2)
0x03392E28,	//0x0336		VoC_loop_r(0,REG5)
0xDDC4D9CC,	//0x0338		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
		//0x0339		VoC_endloop0
		//0x033a		SBC_44_1K_TO_48K_END
0xE5C5FFC0,	//0x033a		VoC_jump(SBC_DEC_RIGHT_DATA_LEN)	|	VoC_NOP
		//0x033c		SBC_DEC_WRONG_DATA_LEN
0x1505F0C5,	//0x033c		VoC_sw16_d(REG5,0x401d)(lo)	|	VoC_lw16i_short(REG5,0x6,DEFAULT)
0xE5D5401D,	//0x033e		VoC_jump(SBC_DECODE_END)	|	VoC_sw16_d(REG5,0x401d)(hi)
		//0x0340		SBC_DEC_RIGHT_DATA_LEN
0xE00579F4,	//0x0340		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_shru16_ri(REG4,0xfffffffe,DEFAULT)
0x40621406,	//0x0342		VoC_lw16_d(REG6,0x4062)
0x404E0912,	//0x0344		VoC_add32_rd(REG45,REG45,0x404e)
0x00800736,	//0x0346		VoC_add16_rd(REG6,REG6,0x80)
0x404E1582,	//0x0348		VoC_sw32_d(REG45,0x404e)
0x40621506,	//0x034a		VoC_sw16_d(REG6,0x4062)
0x00834086,	//0x034c		VoC_be16_rd(SBC_DECODE_END,REG6,0x83)
0x40612007,	//0x034e		VoC_lw16d_set_inc(REG3,0x4061,0x1)
0x40641486,	//0x0350		VoC_lw32_d(RL6,0x4064)
0x027C2B00,	//0x0352		VoC_jump_lg(SBC_DEC_START_DECODE)
		//0x0354		SBC_DECODE_END
0x404E1482,	//0x0354		VoC_lw32_d(REG45,0x404e)
0x401D1400,	//0x0356		VoC_lw16_d(REG0,0x401d)
0x31C0FA12,	//0x0358		VoC_bnez16_r(SBC_DECODE_Output_ERR,REG0)(lo)	|	VoC_shr32_ri(REG45,0x2,DEFAULT)
0x15040396,	//0x035a		VoC_sw16_d(REG4,0x405e)(lo)	|	VoC_bnez16_r(SBC_DECODE_Output_ERR,REG0)(hi)
0x0A80405E,	//0x035c		VoC_lw16i(REG0,0x51aa)(lo)	|	VoC_sw16_d(REG4,0x405e)(hi)
0x140151AA,	//0x035e		VoC_lw16_d(REG1,0x4056)(lo)	|	VoC_lw16i(REG0,0x51aa)(hi)
0x14024056,	//0x0360		VoC_lw16_d(REG2,0x405e)(lo)	|	VoC_lw16_d(REG1,0x4056)(hi)
0x1500405E,	//0x0362		VoC_sw16_d(REG0,0x5e9f)(lo)	|	VoC_lw16_d(REG2,0x405e)(hi)
0x15015E9F,	//0x0364		VoC_sw16_d(REG1,0x5ea0)(lo)	|	VoC_sw16_d(REG0,0x5e9f)(hi)
0x15025EA0,	//0x0366		VoC_sw16_d(REG2,0x5ea1)(lo)	|	VoC_sw16_d(REG1,0x5ea0)(hi)
0xFFC05EA1,	//0x0368		VoC_NAD	|	VoC_sw16_d(REG2,0x5ea1)(hi)
0x22992B80,	//0x036a		VoC_jal(RDA_IIR_EQ)
0x40206C18,	//0x036c		VoC_bez16_d(SBC_DECODE_DRC_PROCESS_END,0x4020)
0x51AA0A80,	//0x036e		VoC_lw16i(REG0,0x51aa)
0x0EEE0A86,	//0x0370		VoC_lw16i(REG6,0xeee)
0x40561404,	//0x0372		VoC_lw16_d(REG4,0x4056)
0x405E1405,	//0x0374		VoC_lw16_d(REG5,0x405e)
0xE1027101,	//0x0376		VoC_lw16i_short(REG2,0x10,IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x8,DEFAULT)
0x405944A1,	//0x0378		VoC_bne16_rd(SBC_DECODE_DRC_PROCESS_END,REG1,0x4059)
0x40544492,	//0x037a		VoC_bne16_rd(SBC_DECODE_DRC_PROCESS_END,REG2,0x4054)
0x04000A87,	//0x037c		VoC_lw16i(REG7,0x400)
0x4CE86C04,	//0x037e		VoC_bez16_d(SBC_DECODE_DRC_PROCESS,0x4ce8)
0x04580A87,	//0x0380		VoC_lw16i(REG7,0x458)
		//0x0382		SBC_DECODE_DRC_PROCESS
0x22482B80,	//0x0382		VoC_jal(RDA_DRC_MODE)
		//0x0384		SBC_DECODE_DRC_PROCESS_END
0x0C0A2B80,	//0x0384		VoC_jal(RDA_SBCDEC_Digital_Gain)
0x0C1E2B80,	//0x0386		VoC_jal(RDA_SBCDEC_Change_Ch_Dual_To_Mono)
0x405E1404,	//0x0388		VoC_lw16_d(REG4,0x405e)
0x28D50A85,	//0x038a		VoC_lw16i(REG5,0x28d5)
0x40061484,	//0x038c		VoC_lw32_d(ACC0,0x4006)
0x7FC215C2,	//0x038e		VoC_sw32_d(REG45,0xffc2)
0x7FC415C4,	//0x0390		VoC_sw32_d(ACC0,0xffc4)
0xFFC0DE80,	//0x0392		VoC_NOP	|	VoC_cfg(0x0)
0x00081794,	//0x0394		VoC_cfg_lg(0x8,)
		//0x0396		SBC_DECODE_Output_ERR
0xFFC0DFA9,	//0x0396		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x0398		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0399		sbc_crc8
0x40661404,	//0x039a		VoC_lw16_d(REG4,0x4066)
0x48701804,	//0x039c		VoC_lw16i_set_inc(REG0,0x4870,0x1)
0x00000A81,	//0x039e		VoC_lw16i(REG1,0x0)
0xE0F5781C,	//0x03a0		VoC_lw16i_short(REG5,0xf,IN_PARALLEL)	|	VoC_shr16_ri(REG4,0x3,DEFAULT)
0xD884670D,	//0x03a2		VoC_lw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_loop_r_short(REG4,DEFAULT)
0xE01664A5,	//0x03a4		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_xor16_rr(REG5,REG4,DEFAULT)
0xF90D642E,	//0x03a6		VoC_shru16_ri(REG5,0x1,IN_PARALLEL)	|	VoC_and16_rr(REG6,REG5,DEFAULT)
0xD884406D,	//0x03a8		VoC_lw16inc_p(REG4,REG0,IN_PARALLEL)	|	VoC_add16_rr(REG5,REG1,REG5,DEFAULT)
0x008007B6,	//0x03aa		VoC_sub16_rd(REG6,REG6,0x80)
0xD85579EE,	//0x03ac		VoC_lw16_p(REG5,REG5,IN_PARALLEL)	|	VoC_shru16_ri(REG6,0xfffffffd,DEFAULT)
0xF945FE75,	//0x03ae		VoC_shru16_ri(REG5,0x8,DEFAULT)	|	VoC_shru16_rr(REG5,REG6,DEFAULT)
		//0x03af		VoC_endloop0
0x40661400,	//0x03b0		VoC_lw16_d(REG0,0x4066)
0x00071600,	//0x03b2		VoC_and16_ri(REG0,0x7)
0x03C63180,	//0x03b4		VoC_bez16_r(LABLE_CRC8_ZERO,REG0)
0xF6A0660F,	//0x03b6		VoC_movreg16(REG0,REG5,IN_PARALLEL)	|	VoC_loop_r_short(REG0,DEFAULT)
0xF8FC64A5,	//0x03b8		VoC_shr16_ri(REG4,0xffffffff,IN_PARALLEL)	|	VoC_xor16_rr(REG5,REG4,DEFAULT)
0x00801605,	//0x03ba		VoC_and16_ri(REG5,0x80)
0x007F1600,	//0x03bc		VoC_and16_ri(REG0,0x7f)
0xF8F8783D,	//0x03be		VoC_shr16_ri(REG0,0xffffffff,IN_PARALLEL)	|	VoC_shr16_ri(REG5,0x7,DEFAULT)
0x03C43185,	//0x03c0		VoC_bez16_r(LABLE_BIT_ZERO,REG5)
0x001D0A85,	//0x03c2		VoC_lw16i(REG5,0x1d)
		//0x03c4		LABLE_BIT_ZERO
0xE005E4A8,	//0x03c4		VoC_movreg16(REG5,REG0,DEFAULT)	|	VoC_xor16_rr(REG0,REG5,DEFAULT)
		//0x03c5		VoC_endloop0
		//0x03c6		LABLE_CRC8_ZERO
0xFFC0DFA9,	//0x03c6		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x03c8		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x03c9		SBC_DECODE_Calculate_Bits
0xE0157004,	//0x03ca		VoC_lw16i_short(REG5,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
0x40554034,	//0x03cc		VoC_be16_rd(LABLE_Caculatebit_MONO_DUAL,REG4,0x4055)
0x40554025,	//0x03ce		VoC_be16_rd(LABLE_Caculatebit_MONO_DUAL,REG5,0x4055)
0x04862B00,	//0x03d0		VoC_jump_lg(LABLE_Caculatebit_STEREO)
		//0x03d2		LABLE_Caculatebit_MONO_DUAL
0x40561404,	//0x03d2		VoC_lw16_d(REG4,0x4056)
0xFFC07005,	//0x03d4		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0x04812E21,	//0x03d6		VoC_loop_r(1,REG4)
0x40981808,	//0x03d8		VoC_lw16i_set_inc(REG0,0x4098,0x2)
0x40681809,	//0x03da		VoC_lw16i_set_inc(REG1,0x4068,0x2)
0x4028DFC5,	//0x03dc		VoC_add16_rr(REG0,REG0,REG5,DEFAULT)	|	VoC_push16(REG5,DEFAULT)
0x7006C069,	//0x03de		VoC_lw16i_short(REG6,0x0,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG5,IN_PARALLEL)
0x1407E014,	//0x03e0		VoC_lw16_d(REG7,0x4059)(lo)	|	VoC_lw16i_short(REG4,0x1,IN_PARALLEL)
0x449C4059,	//0x03e2		VoC_bne16_rd(LABLE_Calculate_Bits_Else1,REG4,0x4057)(lo)	|	VoC_lw16_d(REG7,0x4059)(hi)
0xF0054057,	//0x03e4		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_bne16_rd(LABLE_Calculate_Bits_Else1,REG4,0x4057)(hi)
0xD894E7C5,	//0x03e6		VoC_lw16inc_p(REG4,REG1,DEFAULT)	|	VoC_loop_r_short(REG7,DEFAULT)
0x03EB34A5,	//0x03e8		VoC_bngt16_rr(LABLE_MAX_BITNEED,REG4,REG5)
0xDC84E085,	//0x03ea		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_movreg16(REG5,REG4,DEFAULT)
		//0x03eb		LABLE_MAX_BITNEED
		//0x03eb		VoC_endloop0
0x040C2B00,	//0x03ec		VoC_jump_lg(LABLE_Calculate_Bits_Else1_END)
		//0x03ee		LABLE_Calculate_Bits_Else1
0x40521404,	//0x03ee		VoC_lw16_d(REG4,0x4052)
0x40591407,	//0x03f0		VoC_lw16_d(REG7,0x4059)
0x4437F005,	//0x03f2		VoC_bne16_rd(LABLE_SUBBAND_8,REG7,0x82)(lo)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0xF9F40082,	//0x03f4		VoC_shru16_ri(REG4,0xfffffffe,DEFAULT)	|	VoC_bne16_rd(LABLE_SUBBAND_8,REG7,0x82)(hi)
0x008E1806,	//0x03f6		VoC_lw16i_set_inc(REG2,0x8e,0x1)
0xF9ECE5C4,	//0x03f8		VoC_shru16_ri(REG4,0xfffffffd,DEFAULT)	|	VoC_jump(LABLE_SUBBAND_END)
		//0x03f9		LABLE_SUBBAND_8
0x009E1806,	//0x03fa		VoC_lw16i_set_inc(REG2,0x9e,0x1)
		//0x03fc		LABLE_SUBBAND_END
0xE7CDC0A2,	//0x03fc		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0xEFB45896,	//0x03fe		VoC_lw16i_short(REG4,0xfffffffb,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0x04063186,	//0x0400		VoC_bez16_r(LABLE_Calculate_Bits_Else2_END,REG6)
0x31448594,	//0x0402		VoC_bngtz16_r(LABLE_Calculate_Bits_Else2_END,REG4)(lo)	|	VoC_sub16_rp(REG4,REG6,REG2,DEFAULT)
0xF80C0406,	//0x0404		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_bngtz16_r(LABLE_Calculate_Bits_Else2_END,REG4)(hi)
		//0x0406		LABLE_Calculate_Bits_Else2_END
0x040A34A5,	//0x0406		VoC_bngt16_rr(LABLE_Calculate_Bits_Else3_END,REG4,REG5)
0xFFC06085,	//0x0408		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
		//0x040a		LABLE_Calculate_Bits_Else3_END
		//0x040a		VoC_endloop0
0xDE105C84,	//0x040a		VoC_inc_p(REG2,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
		//0x040c		LABLE_Calculate_Bits_Else1_END
0xF3FE7F43,	//0x040c		VoC_lw16i_short(INC2,0xffffffff,IN_PARALLEL)	|	VoC_lw32z(REG67,DEFAULT)
0x0080072A,	//0x040e		VoC_add16_rd(REG2,REG5,0x80)
		//0x0410		LABLE_Caculate_Bits_Do
0x40981808,	//0x0410		VoC_lw16i_set_inc(REG0,0x4098,0x2)
0xDE105614,	//0x0412		VoC_inc_p(REG2,IN_PARALLEL)	|	VoC_lw16_sd(REG4,0x0,DEFAULT)
0xC1BE4020,	//0x0414		VoC_add16_rr(REG6,REG6,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG4,DEFAULT)
0x40591405,	//0x0416		VoC_lw16_d(REG5,0x4059)
0xF007D883,	//0x0418		VoC_lw16i_short(REG7,0x0,DEFAULT)	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0xE751FFC0,	//0x041a		VoC_loop_r_short(REG5,DEFAULT)	|	VoC_NAD
0x00800714,	//0x041c		VoC_add16_rd(REG4,REG2,0x80)
0x00840715,	//0x041e		VoC_add16_rd(REG5,REG2,0x84)
0x0428349C,	//0x0420		VoC_bngt16_rr(LABLE_Calculate_Bits_Else4,REG3,REG4)
0x042834AB,	//0x0422		VoC_bngt16_rr(LABLE_Calculate_Bits_Else4,REG5,REG3)
0x0080073F,	//0x0424		VoC_add16_rd(REG7,REG7,0x80)
0xFFC065C6,	//0x0426		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABLE_Calculate_Bits_Else4_END)
		//0x0428		LABLE_Calculate_Bits_Else4
0x042C359C,	//0x0428		VoC_bne16_rr(LABLE_Calculate_Bits_Else4_END,REG3,REG4)
0x0081073F,	//0x042a		VoC_add16_rd(REG7,REG7,0x81)
		//0x042c		LABLE_Calculate_Bits_Else4_END
		//0x042c		VoC_endloop0
0xFFC0D883,	//0x042c		VoC_NOP	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0x4A0BC1BB,	//0x042e		VoC_blt16_rd(LABLE_Caculate_Bits_Do,REG3,0x405a)(lo)	|	VoC_add16_rr(REG3,REG6,REG7,DEFAULT)
0x442B405A,	//0x0430		VoC_bne16_rd(LABLE_Caculate_Bits_ELSE5_END,REG3,0x405a)(lo)	|	VoC_blt16_rd(LABLE_Caculate_Bits_Do,REG3,0x405a)(hi)
0x41BE405A,	//0x0432		VoC_add16_rr(REG6,REG6,REG7,DEFAULT)	|	VoC_bne16_rd(LABLE_Caculate_Bits_ELSE5_END,REG3,0x405a)(hi)
0xFFC0DE10,	//0x0434		VoC_NAD	|	VoC_inc_p(REG2,IN_PARALLEL)
		//0x0436		LABLE_Caculate_Bits_ELSE5_END
0x40981808,	//0x0436		VoC_lw16i_set_inc(REG0,0x4098,0x2)
0x40781809,	//0x0438		VoC_lw16i_set_inc(REG1,0x4078,0x2)
0x4061D614,	//0x043a		VoC_add16_rr(REG1,REG1,REG4,DEFAULT)	|	VoC_lw16_sd(REG4,0x0,DEFAULT)
0x1407C020,	//0x043c		VoC_lw16_d(REG7,0x4059)(lo)	|	VoC_add16_rr(REG0,REG0,REG4,IN_PARALLEL)
0x07154059,	//0x043e		VoC_add16_rd(REG5,REG2,0x81)(lo)	|	VoC_lw16_d(REG7,0x4059)(hi)
0xDF400081,	//0x0440		VoC_push32(REG01,DEFAULT)	|	VoC_add16_rd(REG5,REG2,0x81)(hi)
0xE7CBFFC0,	//0x0442		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_NAD
0xE0075884,	//0x0444		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0x044A342C,	//0x0446		VoC_bgt16_rr(LABLE_Caculate_Bits_ELSE6_END,REG5,REG4)
0xFFC042A7,	//0x0448		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG2,REG4,DEFAULT)
		//0x044a		LABLE_Caculate_Bits_ELSE6_END
0x00884C27,	//0x044a		VoC_bnlt16_rd(LABLE_Caculate_Bits_ELSE7_END,REG7,0x88)
0xFFC0F607,	//0x044c		VoC_NOP	|	VoC_lw16i_short(REG7,0xfffffff0,DEFAULT)
		//0x044e		LABLE_Caculate_Bits_ELSE7_END
		//0x044e		VoC_endloop0
0x1407DC97,	//0x044e		VoC_lw16_d(REG7,0x4059)(lo)	|	VoC_sw16inc_p(REG7,REG1,DEFAULT)
0x77C54059,	//0x0450		VoC_lw16i_short(REG5,0xfffffffe,DEFAULT)	|	VoC_lw16_d(REG7,0x4059)(hi)
0xD908EF03,	//0x0452		VoC_lw32_sd(REG01,0x0,DEFAULT)	|	VoC_lw16i_short(REG3,0xfffffff0,IN_PARALLEL)
0xE7D5FFC0,	//0x0454		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_NAD
0x405A4D36,	//0x0456		VoC_bnlt16_rd(LABLE_Caculate_Bits_out,REG6,0x405a)
0xE0175814,	//0x0458		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16_p(REG4,REG1,DEFAULT)
0x04613425,	//0x045a		VoC_bgt16_rr(LABLE_Caculate_Bits_ELSE8,REG4,REG5)
0x046134A3,	//0x045c		VoC_bngt16_rr(LABLE_Caculate_Bits_ELSE8,REG4,REG3)
0xC1BE433C,	//0x045e		VoC_add16_rr(REG6,REG6,REG7,IN_PARALLEL)	|	VoC_sub16_rr(REG4,REG4,REG7,DEFAULT)
0xB817E5CA,	//0x0460		VoC_sub16_pr(REG7,REG0,REG2,DEFAULT)	|	VoC_jump(LABLE_Caculate_Bits_ELSE8_END)
		//0x0461		LABLE_Caculate_Bits_ELSE8
0x00804487,	//0x0462		VoC_bne16_rd(LABLE_Caculate_Bits_ELSE8_END,REG7,0x80)
0x405A0B37,	//0x0464		VoC_sub16_dr(REG7,0x405a,REG6)
0x00803C27,	//0x0466		VoC_bngt16_rd(LABLE_Caculate_Bits_ELSE8_END,REG7,0x80)
0xC3AEE0A4,	//0x0468		VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)	|	VoC_movreg16(REG4,REG5,DEFAULT)
		//0x046a		LABLE_Caculate_Bits_ELSE8_END
		//0x046a		VoC_endloop0
0xDE005C94,	//0x046a		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
		//0x046c		LABLE_Caculate_Bits_out
0x1407DF00,	//0x046c		VoC_lw16_d(REG7,0x4059)(lo)	|	VoC_pop32(REG01,DEFAULT)
0x60234059,	//0x046e		VoC_movreg16(REG3,REG1,DEFAULT)	|	VoC_lw16_d(REG7,0x4059)(hi)
0xD894F007,	//0x0470		VoC_lw16inc_p(REG4,REG1,DEFAULT)	|	VoC_lw16i_short(INC3,0x1,IN_PARALLEL)
0xE7CBFFC0,	//0x0472		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_NAD
0x405A4CA6,	//0x0474		VoC_bnlt16_rd(LABLE_Caculate_Bits_out_2,REG6,0x405a)
0x00883C84,	//0x0476		VoC_bngt16_rd(LABLE_Caculate_Bits_ELSE9_END,REG4,0x88)
0x008007A4,	//0x0478		VoC_sub16_rd(REG4,REG4,0x80)
0x00800736,	//0x047a		VoC_add16_rd(REG6,REG6,0x80)
0xFFC05C34,	//0x047c		VoC_NAD(IN_PARALLEL)	|	VoC_sw16_p(REG4,REG3,DEFAULT)
		//0x047e		LABLE_Caculate_Bits_ELSE9_END
		//0x047e		VoC_endloop0
0xDE185894,	//0x047e		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
		//0x0480		LABLE_Caculate_Bits_out_2
0x072DDF85,	//0x0480		VoC_add16_rd(REG5,REG5,0x80)(lo)	|	VoC_pop16(REG5,DEFAULT)
		//0x0481		VoC_endloop1
0xDFA90080,	//0x0482		VoC_pop16(RA,DEFAULT)	|	VoC_add16_rd(REG5,REG5,0x80)(hi)
0xE580FFC0,	//0x0484		VoC_return	|	VoC_NOP
		//0x0486		LABLE_Caculatebit_STEREO
0x40981804,	//0x0486		VoC_lw16i_set_inc(REG0,0x4098,0x1)
0x40681805,	//0x0488		VoC_lw16i_set_inc(REG1,0x4068,0x1)
0x40591407,	//0x048a		VoC_lw16_d(REG7,0x4059)
0xE0147006,	//0x048c		VoC_lw16i_short(REG4,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG6,0x0,DEFAULT)
0x405744A4,	//0x048e		VoC_bne16_rd(LABLE_Calculate_Bits_Else1_STEREO,REG4,0x4057)
0xF005F9FF,	//0x0490		VoC_lw16i_short(REG5,0x0,DEFAULT)	|	VoC_shru16_ri(REG7,0xffffffff,DEFAULT)
0xD894E7C5,	//0x0492		VoC_lw16inc_p(REG4,REG1,DEFAULT)	|	VoC_loop_r_short(REG7,DEFAULT)
0x049734A5,	//0x0494		VoC_bngt16_rr(LABLE_MAX_BITNEED_STEREO,REG4,REG5)
0xDC84E085,	//0x0496		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_movreg16(REG5,REG4,DEFAULT)
		//0x0497		LABLE_MAX_BITNEED_STEREO
		//0x0497		VoC_endloop0
0x04C22B00,	//0x0498		VoC_jump_lg(LABLE_Calculate_Bits_Else1_END_STEREO)
		//0x049a		LABLE_Calculate_Bits_Else1_STEREO
0x40521404,	//0x049a		VoC_lw16_d(REG4,0x4052)
0x4037F005,	//0x049c		VoC_be16_rd(LABLE_SET_OFFSET_SUBBANDS8,REG7,0x83)(lo)	|	VoC_lw16i_short(REG5,0x0,DEFAULT)
0xF9F40083,	//0x049e		VoC_shru16_ri(REG4,0xfffffffe,DEFAULT)	|	VoC_be16_rd(LABLE_SET_OFFSET_SUBBANDS8,REG7,0x83)(hi)
0x008E1806,	//0x04a0		VoC_lw16i_set_inc(REG2,0x8e,0x1)
0xF9ECE5C4,	//0x04a2		VoC_shru16_ri(REG4,0xfffffffd,DEFAULT)	|	VoC_jump(LABLE_SET_OFFSET_SUBBANDS_END)
		//0x04a3		LABLE_SET_OFFSET_SUBBANDS8
0x009E1806,	//0x04a4		VoC_lw16i_set_inc(REG2,0x9e,0x1)
		//0x04a6		LABLE_SET_OFFSET_SUBBANDS_END
0xE7D9C0A2,	//0x04a6		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0xEFB45896,	//0x04a8		VoC_lw16i_short(REG4,0xfffffffb,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0x04B03186,	//0x04aa		VoC_bez16_r(LABLE_Calculate_Bits_Else2_END_STEREO,REG6)
0x31448594,	//0x04ac		VoC_bngtz16_r(LABLE_Calculate_Bits_Else2_END_STEREO,REG4)(lo)	|	VoC_sub16_rp(REG4,REG6,REG2,DEFAULT)
0xF80C04B0,	//0x04ae		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_bngtz16_r(LABLE_Calculate_Bits_Else2_END_STEREO,REG4)(hi)
		//0x04b0		LABLE_Calculate_Bits_Else2_END_STEREO
0x04B334A5,	//0x04b0		VoC_bngt16_rr(LABLE_Calculate_Bits_Else3_END_STEREO,REG4,REG5)
0xDC84E085,	//0x04b2		VoC_sw16inc_p(REG4,REG0,DEFAULT)	|	VoC_movreg16(REG5,REG4,DEFAULT)
		//0x04b3		LABLE_Calculate_Bits_Else3_END_STEREO
0xEFB45896,	//0x04b4		VoC_lw16i_short(REG4,0xfffffffb,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG1,DEFAULT)
0x04BC3186,	//0x04b6		VoC_bez16_r(LABLE_Calculate_Bits_Else2_END_STEREO_ch1,REG6)
0x31448594,	//0x04b8		VoC_bngtz16_r(LABLE_Calculate_Bits_Else2_END_STEREO_ch1,REG4)(lo)	|	VoC_sub16_rp(REG4,REG6,REG2,DEFAULT)
0xF80C04BC,	//0x04ba		VoC_shr16_ri(REG4,0x1,DEFAULT)	|	VoC_bngtz16_r(LABLE_Calculate_Bits_Else2_END_STEREO_ch1,REG4)(hi)
		//0x04bc		LABLE_Calculate_Bits_Else2_END_STEREO_ch1
0x04C034A5,	//0x04bc		VoC_bngt16_rr(LABLE_Calculate_Bits_Else3_END_STEREO_ch1,REG4,REG5)
0xFFC06085,	//0x04be		VoC_NAD(IN_PARALLEL)	|	VoC_movreg16(REG5,REG4,DEFAULT)
		//0x04c0		LABLE_Calculate_Bits_Else3_END_STEREO_ch1
		//0x04c0		VoC_endloop0
0xDE105C84,	//0x04c0		VoC_inc_p(REG2,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
		//0x04c2		LABLE_Calculate_Bits_Else1_END_STEREO
0xF3FE7F43,	//0x04c2		VoC_lw16i_short(INC2,0xffffffff,IN_PARALLEL)	|	VoC_lw32z(REG67,DEFAULT)
0x0080072A,	//0x04c4		VoC_add16_rd(REG2,REG5,0x80)
		//0x04c6		LABLE_Caculate_Bits_Do_STEREO
0x40981804,	//0x04c6		VoC_lw16i_set_inc(REG0,0x4098,0x1)
0xC1BE5E10,	//0x04c8		VoC_add16_rr(REG6,REG6,REG7,IN_PARALLEL)	|	VoC_inc_p(REG2,DEFAULT)
0x40591405,	//0x04ca		VoC_lw16_d(REG5,0x4059)
0x5883F9FD,	//0x04cc		VoC_lw16inc_p(REG3,REG0,DEFAULT)	|	VoC_shru16_ri(REG5,0xffffffff,DEFAULT)
0xE751E007,	//0x04ce		VoC_loop_r_short(REG5,DEFAULT)	|	VoC_lw16i_short(REG7,0x0,IN_PARALLEL)
0x00800714,	//0x04d0		VoC_add16_rd(REG4,REG2,0x80)
0x00840715,	//0x04d2		VoC_add16_rd(REG5,REG2,0x84)
0x04DC349C,	//0x04d4		VoC_bngt16_rr(LABLE_Calculate_Bits_Else4_STEREO,REG3,REG4)
0x04DC34AB,	//0x04d6		VoC_bngt16_rr(LABLE_Calculate_Bits_Else4_STEREO,REG5,REG3)
0x0080073F,	//0x04d8		VoC_add16_rd(REG7,REG7,0x80)
0xFFC065C6,	//0x04da		VoC_NAD(IN_PARALLEL)	|	VoC_jump(LABLE_Calculate_Bits_Else4_END_STEREO)
		//0x04dc		LABLE_Calculate_Bits_Else4_STEREO
0x04E0359C,	//0x04dc		VoC_bne16_rr(LABLE_Calculate_Bits_Else4_END_STEREO,REG3,REG4)
0x0081073F,	//0x04de		VoC_add16_rd(REG7,REG7,0x81)
		//0x04e0		LABLE_Calculate_Bits_Else4_END_STEREO
		//0x04e0		VoC_endloop0
0xC1BBD883,	//0x04e0		VoC_add16_rr(REG3,REG6,REG7,DEFAULT)	|	VoC_lw16inc_p(REG3,REG0,DEFAULT)
0x405A4A23,	//0x04e2		VoC_blt16_rd(LABLE_Caculate_Bits_Do_STEREO,REG3,0x405a)
0x405A4423,	//0x04e4		VoC_bne16_rd(LABLE_Caculate_Bits_ELSE5_END_STEREO,REG3,0x405a)
0xDE1041BE,	//0x04e6		VoC_inc_p(REG2,IN_PARALLEL)	|	VoC_add16_rr(REG6,REG6,REG7,DEFAULT)
		//0x04e8		LABLE_Caculate_Bits_ELSE5_END_STEREO
0x40591407,	//0x04e8		VoC_lw16_d(REG7,0x4059)
0x40981804,	//0x04ea		VoC_lw16i_set_inc(REG0,0x4098,0x1)
0x40781805,	//0x04ec		VoC_lw16i_set_inc(REG1,0x4078,0x1)
0x0715F9FF,	//0x04ee		VoC_add16_rd(REG5,REG2,0x81)(lo)	|	VoC_shru16_ri(REG7,0xffffffff,DEFAULT)
0xDF400081,	//0x04f0		VoC_push32(REG01,DEFAULT)	|	VoC_add16_rd(REG5,REG2,0x81)(hi)
0xE7CBFFC0,	//0x04f2		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_NAD
0xE0075884,	//0x04f4		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0x04FA342C,	//0x04f6		VoC_bgt16_rr(LABLE_Caculate_Bits_ELSE6_END_STEREO,REG5,REG4)
0xFFC042A7,	//0x04f8		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG7,REG2,REG4,DEFAULT)
		//0x04fa		LABLE_Caculate_Bits_ELSE6_END_STEREO
0x00884C27,	//0x04fa		VoC_bnlt16_rd(LABLE_Caculate_Bits_ELSE7_END_STEREO,REG7,0x88)
0xFFC0F607,	//0x04fc		VoC_NOP	|	VoC_lw16i_short(REG7,0xfffffff0,DEFAULT)
		//0x04fe		LABLE_Caculate_Bits_ELSE7_END_STEREO
		//0x04fe		VoC_endloop0
0x1407DC97,	//0x04fe		VoC_lw16_d(REG7,0x4059)(lo)	|	VoC_sw16inc_p(REG7,REG1,DEFAULT)
0xF7C54059,	//0x0500		VoC_lw16i_short(REG5,0xfffffffe,DEFAULT)	|	VoC_lw16_d(REG7,0x4059)(hi)
0xD908F9FF,	//0x0502		VoC_lw32_sd(REG01,0x0,DEFAULT)	|	VoC_shru16_ri(REG7,0xffffffff,DEFAULT)
0xE7D7FFC0,	//0x0504		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_NAD
0x405A4D86,	//0x0506		VoC_bnlt16_rd(LABLE_Caculate_Bits_out_STEREO,REG6,0x405a)
0xE0175814,	//0x0508		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_lw16_p(REG4,REG1,DEFAULT)
0x05133425,	//0x050a		VoC_bgt16_rr(LABLE_Caculate_Bits_ELSE8_STEREO,REG4,REG5)
0x00883C3C,	//0x050c		VoC_bngt16_rd(LABLE_Caculate_Bits_ELSE8_STEREO,REG4,0x88)
0x008007A4,	//0x050e		VoC_sub16_rd(REG4,REG4,0x80)
0x00800736,	//0x0510		VoC_add16_rd(REG6,REG6,0x80)
0xB817E5CA,	//0x0512		VoC_sub16_pr(REG7,REG0,REG2,DEFAULT)	|	VoC_jump(LABLE_Caculate_Bits_ELSE8_END_STEREO)
		//0x0513		LABLE_Caculate_Bits_ELSE8_STEREO
0x00804487,	//0x0514		VoC_bne16_rd(LABLE_Caculate_Bits_ELSE8_END_STEREO,REG7,0x80)
0x405A0B37,	//0x0516		VoC_sub16_dr(REG7,0x405a,REG6)
0x00803C27,	//0x0518		VoC_bngt16_rd(LABLE_Caculate_Bits_ELSE8_END_STEREO,REG7,0x80)
0xC3AEE0A4,	//0x051a		VoC_sub16_rr(REG6,REG6,REG5,DEFAULT)	|	VoC_movreg16(REG4,REG5,DEFAULT)
		//0x051c		LABLE_Caculate_Bits_ELSE8_END_STEREO
		//0x051c		VoC_endloop0
0xDE005C94,	//0x051c		VoC_inc_p(REG0,IN_PARALLEL)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
		//0x051e		LABLE_Caculate_Bits_out_STEREO
0x40591407,	//0x051e		VoC_lw16_d(REG7,0x4059)
0xF9FFDF00,	//0x0520		VoC_shru16_ri(REG7,0xffffffff,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0xF0076023,	//0x0522		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_movreg16(REG3,REG1,DEFAULT)
0xE7CBD894,	//0x0524		VoC_loop_r_short(REG7,DEFAULT)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
0x405A4CA6,	//0x0526		VoC_bnlt16_rd(LABLE_Caculate_Bits_out_STEREO_2,REG6,0x405a)
0x00883C84,	//0x0528		VoC_bngt16_rd(LABLE_Caculate_Bits_ELSE9_END_STEREO,REG4,0x88)
0x008007A4,	//0x052a		VoC_sub16_rd(REG4,REG4,0x80)
0x00800736,	//0x052c		VoC_add16_rd(REG6,REG6,0x80)
0xFFC05C34,	//0x052e		VoC_NAD(IN_PARALLEL)	|	VoC_sw16_p(REG4,REG3,DEFAULT)
		//0x0530		LABLE_Caculate_Bits_ELSE9_END_STEREO
		//0x0530		VoC_endloop0
0xDE185894,	//0x0530		VoC_inc_p(REG3,IN_PARALLEL)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
		//0x0532		LABLE_Caculate_Bits_out_STEREO_2
0xFFC0DFA9,	//0x0532		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0534		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0536		SBC_DEC_DIV32
0xDF465FE9,	//0x0536		VoC_push32(RL6,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x7F43DF42,	//0x0538		VoC_lw32z(REG67,DEFAULT)	|	VoC_push32(REG45,DEFAULT)
0xF3E4EE15,	//0x053a		VoC_lw16i_short(REG4,0x1f,DEFAULT)	|	VoC_lw16i_short(REG5,0xffffffe1,IN_PARALLEL)
		//0x053c		LABLE_DIV_START
0xFF277F2E,	//0x053c		VoC_movreg32(RL7,ACC0,IN_PARALLEL)	|	VoC_movreg32(RL6,ACC1,DEFAULT)
0x008007A4,	//0x053e		VoC_sub16_rd(REG4,REG4,0x80)
0x0080072D,	//0x0540		VoC_add16_rd(REG5,REG5,0x80)
0x3634FEE6,	//0x0542		VoC_bgt32_rr(LABLE_DIV_1,RL6,ACC0)(lo)	|	VoC_shru32_rr(RL6,REG4,DEFAULT)
0x3734054B,	//0x0544		VoC_be32_rr(LABLE_DIV_1,RL6,ACC0)(lo)	|	VoC_bgt32_rr(LABLE_DIV_1,RL6,ACC0)(hi)
0x31C4054B,	//0x0546		VoC_bnez16_r(LABLE_DIV_START,REG4)(lo)	|	VoC_be32_rr(LABLE_DIV_1,RL6,ACC0)(hi)
0x3184053C,	//0x0548		VoC_bez16_r(LABLE_DIV_END,REG4)(lo)	|	VoC_bnez16_r(LABLE_DIV_START,REG4)(hi)
0xFEEF0553,	//0x054a		VoC_shru32_rr(RL7,REG5,DEFAULT)	|	VoC_bez16_r(LABLE_DIV_END,REG4)(hi)
		//0x054b		LABLE_DIV_1
0x008A1486,	//0x054c		VoC_lw32_d(RL6,0x8a)
0xFEEE4B7D,	//0x054e		VoC_shru32_rr(RL6,REG5,IN_PARALLEL)	|	VoC_sub32_rr(ACC1,ACC1,RL7,DEFAULT)
0x31C4C8F3,	//0x0550		VoC_bnez16_r(LABLE_DIV_START,REG4)(lo)	|	VoC_add32_rr(REG67,REG67,RL6,DEFAULT)
0xDF02053C,	//0x0552		VoC_pop32(REG45,DEFAULT)	|	VoC_bnez16_r(LABLE_DIV_START,REG4)(hi)
		//0x0553		LABLE_DIV_END
0xDF065FA9,	//0x0554		VoC_pop32(RL6,IN_PARALLEL)	|	VoC_pop16(RA,DEFAULT)
0xE580FFC0,	//0x0556		VoC_return	|	VoC_NOP
		//0x0558		sbc_unpack_frame
0xE0415FE9,	//0x0558		VoC_lw16i_short(REG1,0x4,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x40601400,	//0x055a		VoC_lw16_d(REG0,0x4060)
0x3408E243,	//0x055c		VoC_bgt16_rr(SBC_DECODE_ERROR_OUT1,REG1,REG0)(lo)	|	VoC_lbinc_p(REG3)
0xE2A006B3,	//0x055e		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_bgt16_rr(SBC_DECODE_ERROR_OUT1,REG1,REG0)(hi)
0x009C0A81,	//0x0560		VoC_lw16i(REG1,0x9c)
0x06B5358C,	//0x0562		VoC_bne16_rr(SBC_DECODE_ERROR_OUT2,REG1,REG4)
0xFF4462E2,	//0x0564		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_rb_i(REG6,0x8,DEFAULT)
0x48701808,	//0x0566		VoC_lw16i_set_inc(REG0,0x4870,0x2)
0xDDC4E961,	//0x0568		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_loop_i_short(0xb,DEFAULT)
		//0x0569		VoC_endloop0
0x48701804,	//0x056a		VoC_lw16i_set_inc(REG0,0x4870,0x1)
0xE1016288,	//0x056c		VoC_lw16i_short(REG1,0x10,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x2,DEFAULT)
0x1504E289,	//0x056e		VoC_sw16_d(REG4,0x4052)(lo)	|	VoC_rbinc_i(REG5,0x2,DEFAULT)
0x628B4052,	//0x0570		VoC_rbinc_i(REG7,0x2,DEFAULT)	|	VoC_sw16_d(REG4,0x4052)(hi)
0xDC86E024,	//0x0572		VoC_sw16inc_p(REG6,REG0,DEFAULT)	|	VoC_lw16i_short(REG4,0x2,IN_PARALLEL)
0x00864095,	//0x0574		VoC_be16_rd(SBC_DECODE_BLOCKS_STORE,REG5,0x86)
0x403DF181,	//0x0576		VoC_be16_rd(SBC_DECODE_BLOCKS_STORE,REG5,0x81)(lo)	|	VoC_lw16i_short(REG1,0xc,DEFAULT)
0xF1010081,	//0x0578		VoC_lw16i_short(REG1,0x8,DEFAULT)	|	VoC_be16_rd(SBC_DECODE_BLOCKS_STORE,REG5,0x81)(hi)
0x00804025,	//0x057a		VoC_be16_rd(SBC_DECODE_BLOCKS_STORE,REG5,0x80)
0xFFC07081,	//0x057c		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG1,0x4,DEFAULT)
		//0x057e		SBC_DECODE_BLOCKS_STORE
0x40531505,	//0x057e		VoC_sw16_d(REG5,0x4053)
0x40541501,	//0x0580		VoC_sw16_d(REG1,0x4054)
0x058631C7,	//0x0582		VoC_bnez16_r(SBC_DECODE_CHANNEL_MODE_STORE,REG7)
0xFFC07024,	//0x0584		VoC_NAD(IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
		//0x0586		SBC_DECODE_CHANNEL_MODE_STORE
0x40551507,	//0x0586		VoC_sw16_d(REG7,0x4055)
0x1504E286,	//0x0588		VoC_sw16_d(REG4,0x4056)(lo)	|	VoC_rbinc_i(REG6,0x1,DEFAULT)
0x62874056,	//0x058a		VoC_rbinc_i(REG7,0x1,DEFAULT)	|	VoC_sw16_d(REG4,0x4056)(hi)
0x1506E085,	//0x058c		VoC_sw16_d(REG6,0x4057)(lo)	|	VoC_lw16i_short(REG5,0x8,IN_PARALLEL)
0x31C74057,	//0x058e		VoC_bnez16_r(SBC_DECODE_SUBBAND_STORE,REG7)(lo)	|	VoC_sw16_d(REG6,0x4057)(hi)
0xF0850592,	//0x0590		VoC_lw16i_short(REG5,0x4,DEFAULT)	|	VoC_bnez16_r(SBC_DECODE_SUBBAND_STORE,REG7)(hi)
		//0x0592		SBC_DECODE_SUBBAND_STORE
0x40581507,	//0x0592		VoC_sw16_d(REG7,0x4058)
0x1505E243,	//0x0594		VoC_sw16_d(REG5,0x4059)(lo)	|	VoC_lbinc_p(REG3)
0xE2A04059,	//0x0596		VoC_rbinc_i(REG4,0x8,DEFAULT)	|	VoC_sw16_d(REG5,0x4059)(hi)
0xE243FFC0,	//0x0598		VoC_lbinc_p(REG3)	|	VoC_NOP
0x62A3DC84,	//0x059a		VoC_rbinc_i(REG7,0x8,DEFAULT)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0x1504E036,	//0x059c		VoC_sw16_d(REG4,0x405a)(lo)	|	VoC_lw16i_short(REG6,0x3,IN_PARALLEL)
0x1507405A,	//0x059e		VoC_sw16_d(REG7,0x405c)(lo)	|	VoC_sw16_d(REG4,0x405a)(hi)
0xE243405C,	//0x05a0		VoC_lbinc_p(REG3)	|	VoC_sw16_d(REG7,0x405c)(hi)
0x40551402,	//0x05a2		VoC_lw16_d(REG2,0x4055)
0x00200A87,	//0x05a4		VoC_lw16i(REG7,0x20)
0x40591401,	//0x05a6		VoC_lw16_d(REG1,0x4059)
0x05B635B2,	//0x05a8		VoC_bne16_rr(SBC_DEC_SCALE_FACTOR_NO_JOINT,REG6,REG2)
0x00834021,	//0x05aa		VoC_be16_rd(SBC_DEC_SBS_8_JOINT,REG1,0x83)
0xE5C3E291,	//0x05ac		VoC_jump(SBC_DEC_SBS_4_JOINT)	|	VoC_rbinc_i(REG5,0x4,DEFAULT)
		//0x05ae		SBC_DEC_SBS_8_JOINT
0xFFC062A1,	//0x05ae		VoC_NAD(IN_PARALLEL)	|	VoC_rbinc_i(REG5,0x8,DEFAULT)
		//0x05b0		SBC_DEC_SBS_4_JOINT
0x00FE1605,	//0x05b0		VoC_and16_ri(REG5,0xfe)
0xC1CFDC85,	//0x05b2		VoC_add16_rr(REG7,REG7,REG1,DEFAULT)	|	VoC_sw16inc_p(REG5,REG0,DEFAULT)
0x405B1505,	//0x05b4		VoC_sw16_d(REG5,0x405b)
		//0x05b6		SBC_DEC_SCALE_FACTOR_NO_JOINT
0x4068180A,	//0x05b6		VoC_lw16i_set_inc(REG2,0x4068,0x2)
0x40561404,	//0x05b8		VoC_lw16_d(REG4,0x4056)
0xFFC07811,	//0x05ba		VoC_NAD(IN_PARALLEL)	|	VoC_shr16_ri(REG1,0x2,DEFAULT)
0x05CF2E20,	//0x05bc		VoC_loop_r(0,REG4)
0x05CD2E09,	//0x05be		VoC_loop_r(1,REG1)
0xE291E290,	//0x05c0		VoC_rbinc_i(REG5,0x4,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xDCA4E292,	//0x05c2		VoC_sw16inc_p(REG4,REG2,DEFAULT)	|	VoC_rbinc_i(REG6,0x4,DEFAULT)
0xE243DC84,	//0x05c4		VoC_lbinc_p(REG3)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
0xDC85DCA5,	//0x05c6		VoC_sw16inc_p(REG5,REG0,DEFAULT)	|	VoC_sw16inc_p(REG5,REG2,DEFAULT)
0xDCA6E290,	//0x05c8		VoC_sw16inc_p(REG6,REG2,DEFAULT)	|	VoC_rbinc_i(REG4,0x4,DEFAULT)
0xDCA4DC86,	//0x05ca		VoC_sw16inc_p(REG4,REG2,DEFAULT)	|	VoC_sw16inc_p(REG6,REG0,DEFAULT)
0x073FDC84,	//0x05cc		VoC_add16_rd(REG7,REG7,0x84)(lo)	|	VoC_sw16inc_p(REG4,REG0,DEFAULT)
		//0x05cd		VoC_endloop1
0x180A0084,	//0x05ce		VoC_lw16i_set_inc(REG2,0x4069,0x2)(lo)	|	VoC_add16_rd(REG7,REG7,0x84)(hi)
		//0x05cf		VoC_endloop0
0xF2024069,	//0x05d0		VoC_lw16i_short(REG2,0x10,DEFAULT)	|	VoC_lw16i_set_inc(REG2,0x4069,0x2)(hi)
0x40671507,	//0x05d2		VoC_sw16_d(REG7,0x4067)
0x1503C3D7,	//0x05d4		VoC_sw16_d(REG3,0x4061)(lo)	|	VoC_sub16_rr(REG7,REG7,REG2,DEFAULT)
0x15074061,	//0x05d6		VoC_sw16_d(REG7,0x4066)(lo)	|	VoC_sw16_d(REG3,0x4061)(hi)
0x18044066,	//0x05d8		VoC_lw16i_set_inc(REG0,0x4872,0x1)(lo)	|	VoC_sw16_d(REG7,0x4066)(hi)
0x70614872,	//0x05da		VoC_lw16i_short(REG1,0x3,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x4872,0x1)(hi)
0xF032E082,	//0x05dc		VoC_lw16i_short(INC2,0x1,DEFAULT)	|	VoC_lw16i_short(REG2,0x8,IN_PARALLEL)
0x40554431,	//0x05de		VoC_bne16_rd(SBC_DEC_ADJUST_CRC_HEAD_JOINT_SUB4,REG1,0x4055)
0x40594422,	//0x05e0		VoC_bne16_rd(SBC_DEC_ADJUST_CRC_HEAD_JOINT_SUB4,REG2,0x4059)
0x00800700,	//0x05e2		VoC_add16_rd(REG0,REG0,0x80)
		//0x05e4		SBC_DEC_ADJUST_CRC_HEAD_JOINT_SUB4
0x07BFF81F,	//0x05e4		VoC_sub16_rd(REG7,REG7,0x80)(lo)	|	VoC_shr16_ri(REG7,0x3,DEFAULT)
0xE0020080,	//0x05e6		VoC_movreg16(REG2,REG0,DEFAULT)	|	VoC_sub16_rd(REG7,REG7,0x80)(hi)
0x05EF2E38,	//0x05e8		VoC_loop_r(0,REG7)
0x5885D884,	//0x05ea		VoC_lw16inc_p(REG5,REG0,DEFAULT)	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
0xE46CF8E4,	//0x05ec		VoC_or16_rr(REG4,REG5,DEFAULT)	|	VoC_shr16_ri(REG4,0xfffffffc,IN_PARALLEL)
0xDCA4FFC0,	//0x05ee		VoC_sw16inc_p(REG4,REG2,DEFAULT)	|	VoC_NOP
		//0x05ef		VoC_endloop0
0x03992B80,	//0x05f0		VoC_jal(sbc_crc8)
0x405C4025,	//0x05f2		VoC_be16_rd(SBC_DECODE_NO_ERROR_CRC,REG5,0x405c)
0x06B72B00,	//0x05f4		VoC_jump_lg(SBC_DECODE_ERROR_CRC_OUT4)
		//0x05f6		SBC_DECODE_NO_ERROR_CRC
0x03C92B80,	//0x05f6		VoC_jal(SBC_DECODE_Calculate_Bits)
0x40541406,	//0x05f8		VoC_lw16_d(REG6,0x4054)
0x40591405,	//0x05fa		VoC_lw16_d(REG5,0x4059)
0xE00771F8,	//0x05fc		VoC_lw16i_short(REG7,0x0,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT16,0xf,DEFAULT)
0x1807C570,	//0x05fe		VoC_lw16i_set_inc(REG3,0x40a8,0x1)(lo)	|	VoC_mult16_rr(REG0,REG5,REG6,DEFAULT)
0x79F840A8,	//0x0600		VoC_shru16_ri(REG0,0xffffffff,DEFAULT)	|	VoC_lw16i_set_inc(REG3,0x40a8,0x1)(hi)
0xC018F9FE,	//0x0602		VoC_add16_rr(REG0,REG0,REG3,DEFAULT)	|	VoC_shru16_ri(REG6,0xffffffff,IN_PARALLEL)
0xF60F606E,	//0x0604		VoC_movreg16(RL7_HI,REG0,IN_PARALLEL)	|	VoC_movreg16(RL7_LO,REG3,DEFAULT)
0x06702E30,	//0x0606		VoC_loop_r(0,REG6)
0x40781808,	//0x0608		VoC_lw16i_set_inc(REG0,0x4078,0x2)
0x40681809,	//0x060a		VoC_lw16i_set_inc(REG1,0x4068,0x2)
0xC0794038,	//0x060c		VoC_add16_rr(REG1,REG1,REG7,IN_PARALLEL)	|	VoC_add16_rr(REG0,REG0,REG7,DEFAULT)
0xF044DFC7,	//0x060e		VoC_lw16i_short(REG4,0x2,DEFAULT)	|	VoC_push16(REG7,DEFAULT)
0x06163187,	//0x0610		VoC_bez16_r(RDA_UNPACK_CH2,REG7)
0x40563C24,	//0x0612		VoC_bngt16_rd(RDA_UNPACK_CH2,REG4,0x4056)
0x06662B00,	//0x0614		VoC_jump_lg(RDA_UNPACK_CH1)
		//0x0616		RDA_UNPACK_CH2
0x06652E29,	//0x0616		VoC_loop_r(1,REG5)
0xE0055886,	//0x0618		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_lw16inc_p(REG6,REG0,DEFAULT)
0xFF445FC3,	//0x061a		VoC_lw32z(ACC0,IN_PARALLEL)	|	VoC_push16(REG3,DEFAULT)
0x3186D894,	//0x061c		VoC_bez16_r(SBC_DEC_LEVEL_0,REG6)(lo)	|	VoC_lw16inc_p(REG4,REG1,DEFAULT)
0xDFC40662,	//0x061e		VoC_push16(REG4,DEFAULT)	|	VoC_bez16_r(SBC_DEC_LEVEL_0,REG6)(hi)
0x40611403,	//0x0620		VoC_lw16_d(REG3,0x4061)
0xE0115F40,	//0x0622		VoC_lw16i_short(REG1,0x1,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0x7027E243,	//0x0624		VoC_lw16i_short(REG7,0x1,DEFAULT)	|	VoC_lbinc_p(REG3)
0x1400E002,	//0x0626		VoC_lw16_d(REG0,0x4067)(lo)	|	VoC_lw16i_short(REG2,0x0,IN_PARALLEL)
0xFFC04067,	//0x0628		VoC_NAD	|	VoC_lw16_d(REG0,0x4067)(hi)
		//0x062a		SBC_DEC_LEVEL_PLUS_0
0xC28A6284,	//0x062a		VoC_sub16_rr(REG2,REG2,REG1,IN_PARALLEL)	|	VoC_rbinc_i(REG4,0x1,DEFAULT)
0xC3946427,	//0x062c		VoC_sub16_rr(REG4,REG6,REG2,IN_PARALLEL)	|	VoC_and16_rr(REG7,REG4,DEFAULT)
0xC0087E67,	//0x062e		VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)	|	VoC_shru16_rr(REG7,REG4,DEFAULT)
0xE017647D,	//0x0630		VoC_lw16i_short(REG7,0x1,IN_PARALLEL)	|	VoC_or16_rr(REG5,REG7,DEFAULT)
0x062A35B2,	//0x0632		VoC_bne16_rr(SBC_DEC_LEVEL_PLUS_0,REG6,REG2)
0x40671500,	//0x0634		VoC_sw16_d(REG0,0x4067)
0x40611503,	//0x0636		VoC_sw16_d(REG3,0x4061)
0x00850B36,	//0x0638		VoC_sub16_dr(REG6,0x85,REG6)
0x00803836,	//0x063a		VoC_bgt16_rd(SBC_DEC_BITS_1,REG6,0x80)
0xDF845F00,	//0x063c		VoC_pop16(REG4,IN_PARALLEL)	|	VoC_pop32(REG01,DEFAULT)
0x06622B00,	//0x063e		VoC_jump_lg(SBC_DEC_LEVEL_0)
		//0x0640		SBC_DEC_BITS_1
0xFDFCE0A8,	//0x0640		VoC_shru32_ri(ACC0,0xffffffff,DEFAULT)	|	VoC_movreg16(ACC0_LO,REG5,DEFAULT)
0x7FFF0A80,	//0x0642		VoC_lw16i(REG0,0x7fff)
0x008A0922,	//0x0644		VoC_add32_rd(REG45,ACC0,0x8a)
0xE404FF14,	//0x0646		VoC_and16_rr(REG4,REG0,DEFAULT)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0x0E500A80,	//0x0648		VoC_lw16i(REG0,0xe50)
0xC0307DFC,	//0x064a		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_shru32_ri(ACC0,0xffffffff,DEFAULT)
0xC0306125,	//0x064c		VoC_add16_rr(REG0,REG0,REG6,IN_PARALLEL)	|	VoC_movreg16(REG5,ACC0_HI,DEFAULT)
0x0E721484,	//0x064e		VoC_lw32_d(ACC0,0xe72)
0x0E741485,	//0x0650		VoC_lw32_d(ACC1,0xe74)
0x7019D980,	//0x0652		VoC_lw16i_short(FORMAT32,0x0,DEFAULT)	|	VoC_lw32_p(REG01,REG0,DEFAULT)
0x4E04F402,	//0x0654		VoC_mac32_rr(REG0,REG4,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x0,IN_PARALLEL)
0x4C68CE85,	//0x0656		VoC_multf32_rr(REG01,REG1,REG5,DEFAULT)	|	VoC_macX_rr(REG0,REG5,IN_PARALLEL)
0xDF84CE8C,	//0x0658		VoC_pop16(REG4,DEFAULT)	|	VoC_macX_rr(REG1,REG4,IN_PARALLEL)
0x492CFB8D,	//0x065a		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_shr32_ri(ACC1,0xfffffff1,DEFAULT)
0x4904FB10,	//0x065c		VoC_add32_rr(ACC0,ACC0,REG01,DEFAULT)	|	VoC_shr32_ri(REG01,0xffffffe2,IN_PARALLEL)
0xC220E0F0,	//0x065e		VoC_sub16_rr(REG0,REG0,REG4,DEFAULT)	|	VoC_lw16i_short(REG0,0xf,IN_PARALLEL)
0xDF00FE84,	//0x0660		VoC_pop32(REG01,DEFAULT)	|	VoC_shr32_rr(ACC0,REG0,DEFAULT)
		//0x0662		SBC_DEC_LEVEL_0
0xFFC0DF83,	//0x0662		VoC_NOP	|	VoC_pop16(REG3,DEFAULT)
0xDE18DDDC,	//0x0664		VoC_inc_p(REG3,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG3,DEFAULT)
		//0x0665		VoC_endloop1
		//0x0666		RDA_UNPACK_CH1
0x1405DF87,	//0x0666		VoC_lw16_d(REG5,0x4059)(lo)	|	VoC_pop16(REG7,DEFAULT)
0x31C74059,	//0x0668		VoC_bnez16_r(SBC_DEC_SET_SB_SAMPLE_CH1,REG7)(lo)	|	VoC_lw16_d(REG5,0x4059)(hi)
0xE06E066E,	//0x066a		VoC_movreg16(RL7_LO,REG3,DEFAULT)	|	VoC_bnez16_r(SBC_DEC_SET_SB_SAMPLE_CH1,REG7)(hi)
0xE5C3E1E3,	//0x066c		VoC_jump(SBC_DEC_SET_SB_SAMPLE_CH_END)	|	VoC_movreg16(REG3,RL7_HI,DEFAULT)
		//0x066e		SBC_DEC_SET_SB_SAMPLE_CH1
0xE1C3E06F,	//0x066e		VoC_movreg16(REG3,RL7_LO,DEFAULT)	|	VoC_movreg16(RL7_HI,REG3,DEFAULT)
		//0x0670		SBC_DEC_SET_SB_SAMPLE_CH_END
		//0x0670		VoC_endloop0
0x00011707,	//0x0670		VoC_xor16_ri(REG7,0x1)
0x40541405,	//0x0672		VoC_lw16_d(REG5,0x4054)
0x40591406,	//0x0674		VoC_lw16_d(REG6,0x4059)
0x40551407,	//0x0676		VoC_lw16_d(REG7,0x4055)
0xE03445AB,	//0x0678		VoC_lw16i_short(REG4,0x3,IN_PARALLEL)	|	VoC_mult16_rr(REG3,REG6,REG5,DEFAULT)
0x40A81809,	//0x067a		VoC_lw16i_set_inc(REG1,0x40a8,0x2)
0x069B35A7,	//0x067c		VoC_bne16_rr(SBC_DECODE_JOINT_END,REG4,REG7)
0xF00A405A,	//0x067e		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_add16_rr(REG2,REG1,REG3,DEFAULT)
0x1407C09A,	//0x0680		VoC_lw16_d(REG7,0x405b)(lo)	|	VoC_add16_rr(REG2,REG2,REG3,DEFAULT)
0xFFC0405B,	//0x0682		VoC_NAD	|	VoC_lw16_d(REG7,0x405b)(hi)
0x069A2E28,	//0x0684		VoC_loop_r(0,REG5)
0x00800B35,	//0x0686		VoC_sub16_dr(REG5,0x80,REG6)
0x06982E31,	//0x0688		VoC_loop_r(1,REG6)
0xD98C7024,	//0x068a		VoC_lw32_p(ACC0,REG1,IN_PARALLEL)	|	VoC_lw16i_short(REG4,0x1,DEFAULT)
0xD9957E6C,	//0x068c		VoC_lw32_p(ACC1,REG2,IN_PARALLEL)	|	VoC_shru16_rr(REG4,REG5,DEFAULT)
0x3184E43C,	//0x068e		VoC_bez16_r(SBC_DECODE_JOINT_1,REG4)(lo)	|	VoC_and16_rr(REG4,REG7,DEFAULT)
0xC92F0696,	//0x0690		VoC_add32_rr(RL7,ACC0,ACC1,DEFAULT)	|	VoC_bez16_r(SBC_DECODE_JOINT_1,REG4)(hi)
0xDD8FCB2C,	//0x0692		VoC_sw32_p(RL7,REG1,DEFAULT)	|	VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)
0xFFC05D94,	//0x0694		VoC_NAD(IN_PARALLEL)	|	VoC_sw32_p(ACC0,REG2,DEFAULT)
		//0x0696		SBC_DECODE_JOINT_1
0x0080072D,	//0x0696		VoC_add16_rd(REG5,REG5,0x80)
		//0x0698		VoC_endloop1
0xDE105E08,	//0x0698		VoC_inc_p(REG2,IN_PARALLEL)	|	VoC_inc_p(REG1,DEFAULT)
		//0x069a		VoC_endloop0
0xDFDBFFC0,	//0x069a		VoC_push16(BITCACHE,DEFAULT)	|	VoC_NOP
		//0x069b		SBC_DECODE_JOINT_END
0x40671401,	//0x069c		VoC_lw16_d(REG1,0x4067)
0xF0075F82,	//0x069e		VoC_lw16i_short(INC3,0x1,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0x40611403,	//0x06a0		VoC_lw16_d(REG3,0x4061)
0x00071602,	//0x06a2		VoC_and16_ri(REG2,0x7)
0x06A83182,	//0x06a4		VoC_bez16_r(SBC_DEC_UNPACK_END,REG2)
0xC0516310,	//0x06a6		VoC_add16_rr(REG1,REG1,REG2,IN_PARALLEL)	|	VoC_rbinc_r(REG4,REG2,DEFAULT)
		//0x06a8		SBC_DEC_UNPACK_END
0xE0057919,	//0x06a8		VoC_lw16i_short(REG5,0x0,IN_PARALLEL)	|	VoC_shru16_ri(REG1,0x3,DEFAULT)
0x405D1404,	//0x06aa		VoC_lw16_d(REG4,0x405d)
0x40641586,	//0x06ac		VoC_sw32_d(RL6,0x4064)
0xFFC0C061,	//0x06ae		VoC_NOP	|	VoC_add16_rr(REG1,REG1,REG4,DEFAULT)
0x405D1501,	//0x06b0		VoC_sw16_d(REG1,0x405d)
0xF025E5C7,	//0x06b2		VoC_lw16i_short(REG5,0x1,DEFAULT)	|	VoC_jump(SBC_DECODE_ERROR_OUT)
		//0x06b3		SBC_DECODE_ERROR_OUT1
0xF045E5C5,	//0x06b4		VoC_lw16i_short(REG5,0x2,DEFAULT)	|	VoC_jump(SBC_DECODE_ERROR_OUT)
		//0x06b5		SBC_DECODE_ERROR_OUT2
0xF0A5E5C3,	//0x06b6		VoC_lw16i_short(REG5,0x5,DEFAULT)	|	VoC_jump(SBC_DECODE_ERROR_OUT)
		//0x06b7		SBC_DECODE_ERROR_CRC_OUT4
0xDFA9E5C1,	//0x06b8		VoC_pop16(RA,DEFAULT)	|	VoC_jump(SBC_DECODE_ERROR_OUT)
		//0x06b9		SBC_DECODE_ERROR_OUT
0x401D1505,	//0x06ba		VoC_sw16_d(REG5,0x401d)
0xDFE9E580,	//0x06bc		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x06bd		sbc_decoder_init
0x405F1400,	//0x06be		VoC_lw16_d(REG0,0x405f)
0x06CE31C0,	//0x06c0		VoC_bnez16_r(LABLE_INIT_END,REG0)
0x47601808,	//0x06c2		VoC_lw16i_set_inc(REG0,0x4760,0x2)
0xE0167F44,	//0x06c4		VoC_lw16i_short(REG6,0x1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x06C92C80,	//0x06c6		VoC_loop_i(0x0,0x40)
0xDDC4DDC4,	//0x06c8		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG0,DEFAULT)
		//0x06c9		VoC_endloop0
0x475E1584,	//0x06ca		VoC_sw32_d(ACC0,0x475e)
0x405F1506,	//0x06cc		VoC_sw16_d(REG6,0x405f)
		//0x06ce		LABLE_INIT_END
0xFFC0DFA9,	//0x06ce		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x06d0		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x06d2		sbc_mult32s_32s_hi
0xDFC05F41,	//0x06d2		VoC_push16(REG0,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0xDFC15F46,	//0x06d4		VoC_push16(REG1,IN_PARALLEL)	|	VoC_push32(RL6,DEFAULT)
0xF47A7019,	//0x06d6		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xFF296100,	//0x06d8		VoC_movreg32(REG23,ACC1,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC0_LO,DEFAULT)
0x0E822800,	//0x06da		VoC_and16_rd(REG0,0xe82)
0xE101FA7C,	//0x06dc		VoC_movreg16(REG1,ACC0_LO,DEFAULT)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0xFF457F44,	//0x06de		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xCE0A4E42,	//0x06e0		VoC_mac32_rr(REG1,REG2,IN_PARALLEL)	|	VoC_macX_rr(REG0,REG2,DEFAULT)
0x4C5FCC1E,	//0x06e2		VoC_multf32_rr(RL7,REG1,REG3,DEFAULT)	|	VoC_multf32_rr(RL6,REG0,REG3,DEFAULT)
0xFF20C92C,	//0x06e4		VoC_movreg32(REG01,ACC0,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,ACC1,IN_PARALLEL)
0x2984FA78,	//0x06e6		VoC_and32_rd(ACC0,0xd40)(lo)	|	VoC_shr32_ri(REG01,0xf,DEFAULT)
0x483D0D40,	//0x06e8		VoC_add32_rr(ACC1,REG01,RL7,DEFAULT)	|	VoC_and32_rd(ACC0,0xd40)(hi)
0xFA7CC934,	//0x06ea		VoC_shr32_ri(ACC0,0xf,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,RL6,IN_PARALLEL)
0xFA0CC92C,	//0x06ec		VoC_shr32_ri(ACC0,0x1,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0x5F06FBF4,	//0x06ee		VoC_pop32(RL6,DEFAULT)	|	VoC_shr32_ri(ACC0,0xfffffffe,DEFAULT)
0x5F01DF81,	//0x06f0		VoC_pop32(REG23,DEFAULT)	|	VoC_pop16(REG1,IN_PARALLEL)
0xFFC0DF80,	//0x06f2		VoC_NOP	|	VoC_pop16(REG0,IN_PARALLEL)
0xFFC06580,	//0x06f4		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x06f6		sbc_mult16s_32s_hi
0xDFC25F40,	//0x06f6		VoC_push16(REG2,IN_PARALLEL)	|	VoC_push32(REG01,DEFAULT)
0xF47A7019,	//0x06f8		VoC_lw16i_short(FORMATX,0xf,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0xF7426100,	//0x06fa		VoC_movreg16(REG2,ACC1_LO,IN_PARALLEL)	|	VoC_movreg16(REG0,ACC0_LO,DEFAULT)
0x0E822800,	//0x06fc		VoC_and16_rd(REG0,0xe82)
0xE101FA7C,	//0x06fe		VoC_movreg16(REG1,ACC0_LO,DEFAULT)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0xFF457F44,	//0x0700		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xCE0A4E42,	//0x0702		VoC_mac32_rr(REG1,REG2,IN_PARALLEL)	|	VoC_macX_rr(REG0,REG2,DEFAULT)
0xDF005F82,	//0x0704		VoC_pop32(REG01,IN_PARALLEL)	|	VoC_pop16(REG2,DEFAULT)
0xFA0CC92C,	//0x0706		VoC_shr32_ri(ACC0,0x1,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0xFFC0FBF4,	//0x0708		VoC_NOP	|	VoC_shr32_ri(ACC0,0xfffffffe,DEFAULT)
0xFFC06580,	//0x070a		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x070c		sbc_dec_calip
0x0D405434,	//0x070c		VoC_bngt32_rd(SBC_DEC_CLIP_0,ACC0,0xd40)
0x7FFF0A88,	//0x070e		VoC_lw16i(ACC0_LO,0x7fff)
0xFFC065C6,	//0x0710		VoC_NAD(IN_PARALLEL)	|	VoC_jump(SBC_DEC_CLIP_0_end)
		//0x0712		SBC_DEC_CLIP_0
0x0D425024,	//0x0712		VoC_bgt32_rd(SBC_DEC_CLIP_0_end,ACC0,0xd42)
0x00000AC8,	//0x0714		VoC_lw16i(ACC0_LO,0x8000)
		//0x0716		SBC_DEC_CLIP_0_end
0x0D405435,	//0x0716		VoC_bngt32_rd(SBC_DEC_CLIP_1,ACC1,0xd40)
0x7FFF0A8A,	//0x0718		VoC_lw16i(ACC1_LO,0x7fff)
0xFFC065C6,	//0x071a		VoC_NAD(IN_PARALLEL)	|	VoC_jump(SBC_DEC_CLIP_1_end)
		//0x071c		SBC_DEC_CLIP_1
0x0D425025,	//0x071c		VoC_bgt32_rd(SBC_DEC_CLIP_1_end,ACC1,0xd42)
0x00000ACA,	//0x071e		VoC_lw16i(ACC1_LO,0x8000)
		//0x0720		SBC_DEC_CLIP_1_end
0xE580FFC0,	//0x0720		VoC_return	|	VoC_NOP
		//0x0722		sbc_dec_analyze_eight
0xDFC4DFE9,	//0x0722		VoC_push16(REG4,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0xDFC75F41,	//0x0724		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0x48871500,	//0x0726		VoC_sw16_d(REG0,0x4887)
0x31C4D824,	//0x0728		VoC_bnez16_r(LABEL_COMPUTER_CPY_FILTER,REG4)(lo)	|	VoC_lw16_p(REG4,REG2,DEFAULT)
0x1FB8073C,	//0x072a		VoC_lw16i_set_inc(REG0,0x7e,0xfffffffe)(lo)	|	VoC_bnez16_r(LABEL_COMPUTER_CPY_FILTER,REG4)(hi)
0x5FC2007E,	//0x072c		VoC_push16(REG2,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x7e,0xfffffffe)(hi)
0x0A82F3FA,	//0x072e		VoC_lw16i(REG2,0x46)(lo)	|	VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)
0x409A0046,	//0x0730		VoC_add16_rr(REG2,REG2,REG3,DEFAULT)	|	VoC_lw16i(REG2,0x46)(hi)
0x2C48C018,	//0x0732		VoC_loop_i(0x0,0x24)(lo)	|	VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)
0xD9D40738,	//0x0734		VoC_lw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_loop_i(0x0,0x24)(hi)
0xDDC4FFC0,	//0x0736		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_NOP
		//0x0738		VoC_endloop0
0x0A84FFC0,	//0x0738		VoC_lw16i(REG4,0x38)(lo)	|	VoC_NOP
0xDF820038,	//0x073a		VoC_pop16(REG2,DEFAULT)	|	VoC_lw16i(REG4,0x38)(hi)
		//0x073c		LABEL_COMPUTER_CPY_FILTER
0x008307A4,	//0x073c		VoC_sub16_rd(REG4,REG4,0x83)
0xDC24C0E3,	//0x073e		VoC_sw16_p(REG4,REG2,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG4,DEFAULT)
0x48861503,	//0x0740		VoC_sw16_d(REG3,0x4886)
0x000E1FB8,	//0x0742		VoC_lw16i_set_inc(REG0,0xe,0xfffffffe)
0xC0087051,	//0x0744		VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC1,0x2,DEFAULT)
0xD9C5D9CC,	//0x0746		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xCB2CC92F,	//0x0748		VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_add32_rr(RL7,ACC0,ACC1,DEFAULT)
0x48601587,	//0x074a		VoC_sw32_d(RL7,0x4860)
0x486E1584,	//0x074c		VoC_sw32_d(ACC0,0x486e)
0xD9C5D9CC,	//0x074e		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xCB2CC92F,	//0x0750		VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_add32_rr(RL7,ACC0,ACC1,DEFAULT)
0x48621587,	//0x0752		VoC_sw32_d(RL7,0x4862)
0x486C1584,	//0x0754		VoC_sw32_d(ACC0,0x486c)
0xD9C5D9CC,	//0x0756		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xCB2CC92F,	//0x0758		VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_add32_rr(RL7,ACC0,ACC1,DEFAULT)
0x48641587,	//0x075a		VoC_sw32_d(RL7,0x4864)
0x486A1584,	//0x075c		VoC_sw32_d(ACC0,0x486a)
0xD9C5D9CC,	//0x075e		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xCB2CC92F,	//0x0760		VoC_sub32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_add32_rr(RL7,ACC0,ACC1,DEFAULT)
0x00830709,	//0x0762		VoC_add16_rd(REG1,REG1,0x83)
0x48661587,	//0x0764		VoC_sw32_d(RL7,0x4866)
0x48681584,	//0x0766		VoC_sw32_d(ACC0,0x4868)
0x1480DFC1,	//0x0768		VoC_lw32_d(REG01,0x4860)(lo)	|	VoC_push16(REG1,DEFAULT)
0x14834860,	//0x076a		VoC_lw32_d(REG67,0x4866)(lo)	|	VoC_lw32_d(REG01,0x4860)(hi)
0xC8184866,	//0x076c		VoC_add32_rr(REG01,REG01,REG67,DEFAULT)	|	VoC_lw32_d(REG67,0x4866)(hi)
0xCA1BFBFB,	//0x076e		VoC_sub32_rr(REG67,REG01,REG67,DEFAULT)	|	VoC_shr32_ri(REG67,0xffffffff,DEFAULT)
0x48621481,	//0x0770		VoC_lw32_d(REG23,0x4862)
0x48641482,	//0x0772		VoC_lw32_d(REG45,0x4864)
0xFBFAC851,	//0x0774		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_add32_rr(REG23,REG23,REG45,DEFAULT)
0xC89CCA52,	//0x0776		VoC_add32_rr(ACC0,REG45,REG67,DEFAULT)	|	VoC_sub32_rr(REG45,REG23,REG45,DEFAULT)
0x0E761485,	//0x0778		VoC_lw32_d(ACC1,0xe76)
0x06D22B80,	//0x077a		VoC_jal(sbc_mult32s_32s_hi)
0xC808FF22,	//0x077c		VoC_add32_rr(REG01,REG01,REG23,DEFAULT)	|	VoC_movreg32(REG45,ACC0,DEFAULT)
0xCA09FBF9,	//0x077e		VoC_sub32_rr(REG23,REG01,REG23,DEFAULT)	|	VoC_shr32_ri(REG23,0xffffffff,DEFAULT)
0x0E840900,	//0x0780		VoC_add32_rd(REG01,REG01,0xe84)
0x0E840909,	//0x0782		VoC_add32_rd(REG23,REG23,0xe84)
0x48861402,	//0x0784		VoC_lw16_d(REG2,0x4886)
0x00820710,	//0x0786		VoC_add16_rd(REG0,REG2,0x82)
0xDC03DC21,	//0x0788		VoC_sw16_p(REG3,REG0,DEFAULT)	|	VoC_sw16_p(REG1,REG2,DEFAULT)
0xFBFAC8D3,	//0x078a		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_add32_rr(REG67,REG67,REG45,DEFAULT)
0x0912CAD2,	//0x078c		VoC_add32_rd(REG45,REG45,0xe86)(lo)	|	VoC_sub32_rr(REG45,REG67,REG45,DEFAULT)
0x091B0E86,	//0x078e		VoC_add32_rd(REG67,REG67,0xe84)(lo)	|	VoC_add32_rd(REG45,REG45,0xe86)(hi)
0xFA7A0E84,	//0x0790		VoC_shr32_ri(REG45,0xf,DEFAULT)	|	VoC_add32_rd(REG67,REG67,0xe84)(hi)
0x00810713,	//0x0792		VoC_add16_rd(REG3,REG2,0x81)
0x0DF10711,	//0x0794		VoC_add16_rd(REG1,REG2,0xdf1)
0xDC14DC37,	//0x0796		VoC_sw16_p(REG4,REG1,DEFAULT)	|	VoC_sw16_p(REG7,REG3,DEFAULT)
0x48681480,	//0x0798		VoC_lw32_d(REG01,0x4868)
0x486A1481,	//0x079a		VoC_lw32_d(REG23,0x486a)
0x486C1482,	//0x079c		VoC_lw32_d(REG45,0x486c)
0x486E1483,	//0x079e		VoC_lw32_d(REG67,0x486e)
0xC851C808,	//0x07a0		VoC_add32_rr(REG23,REG23,REG45,DEFAULT)	|	VoC_add32_rr(REG01,REG01,REG23,DEFAULT)
0x7028C89A,	//0x07a2		VoC_lw16i_short(ACC0_LO,0x1,DEFAULT)	|	VoC_add32_rr(REG45,REG45,REG67,DEFAULT)
0x33C0E009,	//0x07a4		VoC_bnltz32_r(SBC_DEC_ROUND_L04,REG01)(lo)	|	VoC_lw16i_short(ACC0_HI,0x0,IN_PARALLEL)
0xC82007A8,	//0x07a6		VoC_add32_rr(REG01,REG01,ACC0,DEFAULT)	|	VoC_bnltz32_r(SBC_DEC_ROUND_L04,REG01)(hi)
		//0x07a8		SBC_DEC_ROUND_L04
0x07AC33C1,	//0x07a8		VoC_bnltz32_r(SBC_DEC_ROUND_L05,REG23)
0xFFC04861,	//0x07aa		VoC_NAD(IN_PARALLEL)	|	VoC_add32_rr(REG23,REG23,ACC0,DEFAULT)
		//0x07ac		SBC_DEC_ROUND_L05
0x07B033C2,	//0x07ac		VoC_bnltz32_r(SBC_DEC_ROUND_L06,REG45)
0xFFC048A2,	//0x07ae		VoC_NAD(IN_PARALLEL)	|	VoC_add32_rr(REG45,REG45,ACC0,DEFAULT)
		//0x07b0		SBC_DEC_ROUND_L06
0x07B433C3,	//0x07b0		VoC_bnltz32_r(SBC_DEC_ROUND_L07,REG67)
0xFFC048E3,	//0x07b2		VoC_NAD(IN_PARALLEL)	|	VoC_add32_rr(REG67,REG67,ACC0,DEFAULT)
		//0x07b4		SBC_DEC_ROUND_L07
0xFA097A08,	//0x07b4		VoC_shr32_ri(REG23,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0x1,DEFAULT)
0xFA0B7A0A,	//0x07b6		VoC_shr32_ri(REG67,0x1,IN_PARALLEL)	|	VoC_shr32_ri(REG45,0x1,DEFAULT)
0x1485FF0C,	//0x07b8		VoC_lw32_d(ACC1,0xe76)(lo)	|	VoC_movreg32(ACC0,REG23,DEFAULT)
0x2B800E76,	//0x07ba		VoC_jal(sbc_mult32s_32s_hi)(lo)	|	VoC_lw32_d(ACC1,0xe76)(hi)
0xFF2106D2,	//0x07bc		VoC_movreg32(REG23,ACC0,DEFAULT)	|	VoC_jal(sbc_mult32s_32s_hi)(hi)
0x1485CA84,	//0x07be		VoC_lw32_d(ACC1,0xe78)(lo)	|	VoC_sub32_rr(ACC0,REG45,REG01,DEFAULT)
0x2B800E78,	//0x07c0		VoC_jal(sbc_mult32s_32s_hi)(lo)	|	VoC_lw32_d(ACC1,0xe78)(hi)
0xFF2606D2,	//0x07c2		VoC_movreg32(RL6,ACC0,DEFAULT)	|	VoC_jal(sbc_mult32s_32s_hi)(hi)
0x1485FF04,	//0x07c4		VoC_lw32_d(ACC1,0xe7a)(lo)	|	VoC_movreg32(ACC0,REG01,DEFAULT)
0x2B800E7A,	//0x07c6		VoC_jal(sbc_mult32s_32s_hi)(lo)	|	VoC_lw32_d(ACC1,0xe7a)(hi)
0xCB3006D2,	//0x07c8		VoC_sub32_rr(REG01,ACC0,RL6,DEFAULT)	|	VoC_jal(sbc_mult32s_32s_hi)(hi)
0x1485FF14,	//0x07ca		VoC_lw32_d(ACC1,0xe7c)(lo)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0x2B800E7C,	//0x07cc		VoC_jal(sbc_mult32s_32s_hi)(lo)	|	VoC_lw32_d(ACC1,0xe7c)(hi)
0xCB3206D2,	//0x07ce		VoC_sub32_rr(REG45,ACC0,RL6,DEFAULT)	|	VoC_jal(sbc_mult32s_32s_hi)(hi)
0xFBF9C8CB,	//0x07d0		VoC_shr32_ri(REG23,0xffffffff,DEFAULT)	|	VoC_add32_rr(REG67,REG67,REG23,DEFAULT)
0xC841CAC9,	//0x07d2		VoC_add32_rr(REG23,REG23,REG01,DEFAULT)	|	VoC_sub32_rr(REG23,REG67,REG23,DEFAULT)
0xCA40FBF8,	//0x07d4		VoC_sub32_rr(REG01,REG23,REG01,DEFAULT)	|	VoC_shr32_ri(REG01,0xffffffff,DEFAULT)
0x0E860900,	//0x07d6		VoC_add32_rd(REG01,REG01,0xe86)
0x0E860909,	//0x07d8		VoC_add32_rd(REG23,REG23,0xe86)
0xFA797A78,	//0x07da		VoC_shr32_ri(REG23,0xf,IN_PARALLEL)	|	VoC_shr32_ri(REG01,0xf,DEFAULT)
0x48861403,	//0x07dc		VoC_lw16_d(REG3,0x4886)
0x0086071B,	//0x07de		VoC_add16_rd(REG3,REG3,0x86)
0x00810719,	//0x07e0		VoC_add16_rd(REG1,REG3,0x81)
0xDC12DC30,	//0x07e2		VoC_sw16_p(REG2,REG1,DEFAULT)	|	VoC_sw16_p(REG0,REG3,DEFAULT)
0xFBFAC8D3,	//0x07e4		VoC_shr32_ri(REG45,0xffffffff,DEFAULT)	|	VoC_add32_rr(REG67,REG67,REG45,DEFAULT)
0x0912CAD2,	//0x07e6		VoC_add32_rd(REG45,REG45,0xe88)(lo)	|	VoC_sub32_rr(REG45,REG67,REG45,DEFAULT)
0x091B0E88,	//0x07e8		VoC_add32_rd(REG67,REG67,0xe86)(lo)	|	VoC_add32_rd(REG45,REG45,0xe88)(hi)
0x7A6A0E86,	//0x07ea		VoC_shr32_ri(REG45,0xd,DEFAULT)	|	VoC_add32_rd(REG67,REG67,0xe86)(hi)
0x071BFA7B,	//0x07ec		VoC_add16_rd(REG3,REG3,0x82)(lo)	|	VoC_shr32_ri(REG67,0xf,IN_PARALLEL)
0x07890082,	//0x07ee		VoC_sub16_rd(REG1,REG1,0x82)(lo)	|	VoC_add16_rd(REG3,REG3,0x82)(hi)
0xDC340082,	//0x07f0		VoC_sw16_p(REG4,REG3,DEFAULT)	|	VoC_sub16_rd(REG1,REG1,0x82)(hi)
0x7F44DC16,	//0x07f2		VoC_lw32z(ACC0,DEFAULT)	|	VoC_sw16_p(REG6,REG1,DEFAULT)
0x7079FF45,	//0x07f4		VoC_lw16i_short(FORMAT32,0x3,DEFAULT)	|	VoC_lw32z(ACC1,IN_PARALLEL)
0x1809F41A,	//0x07f6		VoC_lw16i_set_inc(REG1,0xe8a,0x2)(lo)	|	VoC_lw16i_short(FORMATX,0x3,IN_PARALLEL)
0x180B0E8A,	//0x07f8		VoC_lw16i_set_inc(REG3,0xe8b,0x2)(lo)	|	VoC_lw16i_set_inc(REG1,0xe8a,0x2)(hi)
0x18800E8B,	//0x07fa		VoC_lw16i_set_inc(REG0,0xc,0x10)(lo)	|	VoC_lw16i_set_inc(REG3,0xe8b,0x2)(hi)
0x0700000C,	//0x07fc		VoC_add16_rd(REG0,REG0,0x4886)(lo)	|	VoC_lw16i_set_inc(REG0,0xc,0x10)(hi)
0xF2124886,	//0x07fe		VoC_lw16i_short(INC2,0x10,DEFAULT)	|	VoC_add16_rd(REG0,REG0,0x4886)(hi)
0x00830702,	//0x0800		VoC_add16_rd(REG2,REG0,0x83)
0x7FC0D401,	//0x0802		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0x7059D493,	//0x0804		VoC_lw16i_short(FORMAT32,0x2,DEFAULT)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0xD401F5FA,	//0x0806		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0xD4937FC0,	//0x0808		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xD401F7B9,	//0x080a		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xfffffffd,DEFAULT)
0xD4937FC0,	//0x080c		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xF41A7059,	//0x080e		VoC_lw16i_short(FORMATX,0x3,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x2,DEFAULT)
0x7FC0D401,	//0x0810		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0xF079D493,	//0x0812		VoC_lw16i_short(FORMAT32,0x3,DEFAULT)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0x1400D401,	//0x0814		VoC_lw16_d(REG0,0x4887)(lo)	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0xC92C4887,	//0x0816		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_lw16_d(REG0,0x4887)(hi)
0xFF457A7C,	//0x0818		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0x070C2B80,	//0x081a		VoC_jal(sbc_dec_calip)
0xFF44DC08,	//0x081c		VoC_lw32z(ACC0,DEFAULT)	|	VoC_sw16_p(ACC0_LO,REG0,DEFAULT)
0xF41A70B9,	//0x081e		VoC_lw16i_short(FORMATX,0x3,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x5,DEFAULT)
0x00051818,	//0x0820		VoC_lw16i_set_inc(REG0,0x5,0x6)
0x48860700,	//0x0822		VoC_add16_rd(REG0,REG0,0x4886)
0xF60270D2,	//0x0824		VoC_movreg16(REG2,REG0,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x6,DEFAULT)
0x7FC0D403,	//0x0826		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7150D491,	//0x0828		VoC_lw16i_short(INC0,0xa,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xF05AF02A,	//0x082a		VoC_lw16i_short(FORMATX,0x2,DEFAULT)	|	VoC_lw16i_short(INC2,0xa,IN_PARALLEL)
0x7FC0D403,	//0x082c		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x70D0D491,	//0x082e		VoC_lw16i_short(INC0,0x6,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7019F01A,	//0x0830		VoC_lw16i_short(FORMAT32,0x0,DEFAULT)	|	VoC_lw16i_short(INC2,0x6,IN_PARALLEL)
0xD403F5EA,	//0x0832		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xfffffffd,IN_PARALLEL)
0xD4917FC0,	//0x0834		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF02A7150,	//0x0836		VoC_lw16i_short(INC2,0xa,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0xa,DEFAULT)
0xD403F079,	//0x0838		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0x3,DEFAULT)
0xD4917FC0,	//0x083a		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF01A70D0,	//0x083c		VoC_lw16i_short(INC2,0x6,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x6,DEFAULT)
0xF5F277F9,	//0x083e		VoC_lw16i_short(FORMATX,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)
0x7FC0D403,	//0x0840		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7150D491,	//0x0842		VoC_lw16i_short(INC0,0xa,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xF7FAF02A,	//0x0844		VoC_lw16i_short(FORMATX,0xffffffff,DEFAULT)	|	VoC_lw16i_short(INC2,0xa,IN_PARALLEL)
0x7FC0D403,	//0x0846		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x70D0D491,	//0x0848		VoC_lw16i_short(INC0,0x6,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xF03AF01A,	//0x084a		VoC_lw16i_short(FORMATX,0x1,DEFAULT)	|	VoC_lw16i_short(INC2,0x6,IN_PARALLEL)
0x7FC0D403,	//0x084c		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7150D491,	//0x084e		VoC_lw16i_short(INC0,0xa,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7059F02A,	//0x0850		VoC_lw16i_short(FORMAT32,0x2,DEFAULT)	|	VoC_lw16i_short(INC2,0xa,IN_PARALLEL)
0xD403F5FA,	//0x0852		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0xD4917FC0,	//0x0854		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF01A70D0,	//0x0856		VoC_lw16i_short(INC2,0x6,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x6,DEFAULT)
0xD403F039,	//0x0858		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0x1,DEFAULT)
0xD4917FC0,	//0x085a		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF43A7099,	//0x085c		VoC_lw16i_short(FORMATX,0x7,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x4,DEFAULT)
0x7FC0D403,	//0x085e		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x1406D491,	//0x0860		VoC_lw16_d(REG6,0x4887)(lo)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x14074887,	//0x0862		VoC_lw16_d(REG7,0x4887)(lo)	|	VoC_lw16_d(REG6,0x4887)(hi)
0x14054887,	//0x0864		VoC_lw16_d(REG5,0x4056)(lo)	|	VoC_lw16_d(REG7,0x4887)(hi)
0x7A7C4056,	//0x0866		VoC_shr32_ri(ACC0,0xf,DEFAULT)	|	VoC_lw16_d(REG5,0x4056)(hi)
0xFFC0FA7D,	//0x0868		VoC_NAD	|	VoC_shr32_ri(ACC1,0xf,IN_PARALLEL)
0x070C2B80,	//0x086a		VoC_jal(sbc_dec_calip)
0x00814835,	//0x086c		VoC_blt16_rd(SBC_DEC_SYS_CH1_0,REG5,0x81)
0x00800736,	//0x086e		VoC_add16_rd(REG6,REG6,0x80)
0x0089073F,	//0x0870		VoC_add16_rd(REG7,REG7,0x89)
		//0x0872		SBC_DEC_SYS_CH1_0
0x00800736,	//0x0872		VoC_add16_rd(REG6,REG6,0x80)
0x0089073F,	//0x0874		VoC_add16_rd(REG7,REG7,0x89)
0xDC7ADC68,	//0x0876		VoC_sw16_p(ACC1_LO,REG7,DEFAULT)	|	VoC_sw16_p(ACC0_LO,REG6,DEFAULT)
0xFF457F44,	//0x0878		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF42270D9,	//0x087a		VoC_lw16i_short(FORMATX,0x4,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x6,DEFAULT)
0x00061810,	//0x087c		VoC_lw16i_set_inc(REG0,0x6,0x4)
0x48860700,	//0x087e		VoC_add16_rd(REG0,REG0,0x4886)
0xF6027092,	//0x0880		VoC_movreg16(REG2,REG0,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x4,DEFAULT)
0x7FC0D403,	//0x0882		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7190D491,	//0x0884		VoC_lw16i_short(INC0,0xc,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xF0B9F032,	//0x0886		VoC_lw16i_short(FORMAT32,0x5,DEFAULT)	|	VoC_lw16i_short(INC2,0xc,IN_PARALLEL)
0x7FC0D403,	//0x0888		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7090D491,	//0x088a		VoC_lw16i_short(INC0,0x4,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7799F012,	//0x088c		VoC_lw16i_short(FORMAT32,0xfffffffc,DEFAULT)	|	VoC_lw16i_short(INC2,0x4,IN_PARALLEL)
0xD403F5F2,	//0x088e		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xfffffffe,IN_PARALLEL)
0xD4917FC0,	//0x0890		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF0327190,	//0x0892		VoC_lw16i_short(INC2,0xc,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0xc,DEFAULT)
0xF40A7079,	//0x0894		VoC_lw16i_short(FORMATX,0x1,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x3,DEFAULT)
0x7FC0D403,	//0x0896		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7090D491,	//0x0898		VoC_lw16i_short(INC0,0x4,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x77F9F012,	//0x089a		VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)	|	VoC_lw16i_short(INC2,0x4,IN_PARALLEL)
0xD403F5EA,	//0x089c		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xfffffffd,IN_PARALLEL)
0xD4917FC0,	//0x089e		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF0327190,	//0x08a0		VoC_lw16i_short(INC2,0xc,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0xc,DEFAULT)
0xD403F7DA,	//0x08a2		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xfffffffe,DEFAULT)
0xD4917FC0,	//0x08a4		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF0127090,	//0x08a6		VoC_lw16i_short(INC2,0x4,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x4,DEFAULT)
0xF42277B9,	//0x08a8		VoC_lw16i_short(FORMATX,0x4,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xfffffffd,DEFAULT)
0x7FC0D403,	//0x08aa		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7190D491,	//0x08ac		VoC_lw16i_short(INC0,0xc,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7039F032,	//0x08ae		VoC_lw16i_short(FORMAT32,0x1,DEFAULT)	|	VoC_lw16i_short(INC2,0xc,IN_PARALLEL)
0xD403F412,	//0x08b0		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x2,IN_PARALLEL)
0xD4917FC0,	//0x08b2		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF0127090,	//0x08b4		VoC_lw16i_short(INC2,0x4,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x4,DEFAULT)
0xF41A7079,	//0x08b6		VoC_lw16i_short(FORMATX,0x3,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x3,DEFAULT)
0x7FC0D403,	//0x08b8		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7099D491,	//0x08ba		VoC_lw16i_short(FORMAT32,0x4,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xD403F432,	//0x08bc		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x6,IN_PARALLEL)
0xD4917FC0,	//0x08be		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0x48871400,	//0x08c0		VoC_lw16_d(REG0,0x4887)
0x48871402,	//0x08c2		VoC_lw16_d(REG2,0x4887)
0x40561405,	//0x08c4		VoC_lw16_d(REG5,0x4056)
0xFA7D7A7C,	//0x08c6		VoC_shr32_ri(ACC1,0xf,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0x070C2B80,	//0x08c8		VoC_jal(sbc_dec_calip)
0x00814835,	//0x08ca		VoC_blt16_rd(SBC_DEC_SYS_CH1_1,REG5,0x81)
0x00810700,	//0x08cc		VoC_add16_rd(REG0,REG0,0x81)
0x0DF10712,	//0x08ce		VoC_add16_rd(REG2,REG2,0xdf1)
		//0x08d0		SBC_DEC_SYS_CH1_1
0x00810700,	//0x08d0		VoC_add16_rd(REG0,REG0,0x81)
0x0DF10712,	//0x08d2		VoC_add16_rd(REG2,REG2,0xdf1)
0xDC2ADC08,	//0x08d4		VoC_sw16_p(ACC1_LO,REG2,DEFAULT)	|	VoC_sw16_p(ACC0_LO,REG0,DEFAULT)
0xFF457F44,	//0x08d6		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF42A70D9,	//0x08d8		VoC_lw16i_short(FORMATX,0x5,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x6,DEFAULT)
0x00071808,	//0x08da		VoC_lw16i_set_inc(REG0,0x7,0x2)
0x48860700,	//0x08dc		VoC_add16_rd(REG0,REG0,0x4886)
0xF6027052,	//0x08de		VoC_movreg16(REG2,REG0,IN_PARALLEL)	|	VoC_lw16i_short(INC2,0x2,DEFAULT)
0x7FC0D403,	//0x08e0		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x71D0D491,	//0x08e2		VoC_lw16i_short(INC0,0xe,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x70B9F03A,	//0x08e4		VoC_lw16i_short(FORMAT32,0x5,DEFAULT)	|	VoC_lw16i_short(INC2,0xe,IN_PARALLEL)
0xD403F43A,	//0x08e6		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x7,IN_PARALLEL)
0xD4917FC0,	//0x08e8		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF00A7050,	//0x08ea		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0xF5FA7059,	//0x08ec		VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x2,DEFAULT)
0x7FC0D403,	//0x08ee		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x71D0D491,	//0x08f0		VoC_lw16i_short(INC0,0xe,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7099F03A,	//0x08f2		VoC_lw16i_short(FORMAT32,0x4,DEFAULT)	|	VoC_lw16i_short(INC2,0xe,IN_PARALLEL)
0xD403F5DA,	//0x08f4		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xfffffffb,IN_PARALLEL)
0xD4917FC0,	//0x08f6		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF00A7050,	//0x08f8		VoC_lw16i_short(INC2,0x2,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x2,DEFAULT)
0xF5F277D9,	//0x08fa		VoC_lw16i_short(FORMATX,0xfffffffe,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xfffffffe,DEFAULT)
0x7FC0D403,	//0x08fc		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x71D0D491,	//0x08fe		VoC_lw16i_short(INC0,0xe,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xF7B9F03A,	//0x0900		VoC_lw16i_short(FORMAT32,0xfffffffd,DEFAULT)	|	VoC_lw16i_short(INC2,0xe,IN_PARALLEL)
0x7FC0D403,	//0x0902		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7050D491,	//0x0904		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7039F00A,	//0x0906		VoC_lw16i_short(FORMAT32,0x1,DEFAULT)	|	VoC_lw16i_short(INC2,0x2,IN_PARALLEL)
0xD403F41A,	//0x0908		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x3,IN_PARALLEL)
0xD4917FC0,	//0x090a		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF03A71D0,	//0x090c		VoC_lw16i_short(INC2,0xe,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0xe,DEFAULT)
0xF40A7059,	//0x090e		VoC_lw16i_short(FORMATX,0x1,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x2,DEFAULT)
0x7FC0D403,	//0x0910		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7050D491,	//0x0912		VoC_lw16i_short(INC0,0x2,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xF119F00A,	//0x0914		VoC_lw16i_short(FORMAT32,0x8,DEFAULT)	|	VoC_lw16i_short(INC2,0x2,IN_PARALLEL)
0x7FC0D403,	//0x0916		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x70D9D491,	//0x0918		VoC_lw16i_short(FORMAT32,0x6,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xD403F43A,	//0x091a		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x7,IN_PARALLEL)
0xD4917FC0,	//0x091c		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0x48871400,	//0x091e		VoC_lw16_d(REG0,0x4887)
0x48871402,	//0x0920		VoC_lw16_d(REG2,0x4887)
0x40561405,	//0x0922		VoC_lw16_d(REG5,0x4056)
0x7A7CF0A4,	//0x0924		VoC_shr32_ri(ACC0,0xf,DEFAULT)	|	VoC_lw16i_short(REG4,0x5,DEFAULT)
0xFFC0FA7D,	//0x0926		VoC_NAD	|	VoC_shr32_ri(ACC1,0xf,IN_PARALLEL)
0x070C2B80,	//0x0928		VoC_jal(sbc_dec_calip)
0x00814835,	//0x092a		VoC_blt16_rd(SBC_DEC_SYS_CH1_2,REG5,0x81)
0x00860700,	//0x092c		VoC_add16_rd(REG0,REG0,0x86)
0xFFC040A2,	//0x092e		VoC_NAD(IN_PARALLEL)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
		//0x0930		SBC_DEC_SYS_CH1_2
0x00860700,	//0x0930		VoC_add16_rd(REG0,REG0,0x86)
0xDC08C0A2,	//0x0932		VoC_sw16_p(ACC0_LO,REG0,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,DEFAULT)
0x7F44DC2A,	//0x0934		VoC_lw32z(ACC0,DEFAULT)	|	VoC_sw16_p(ACC1_LO,REG2,DEFAULT)
0x7099FF45,	//0x0936		VoC_lw16i_short(FORMAT32,0x4,DEFAULT)	|	VoC_lw32z(ACC1,IN_PARALLEL)
0x1900F5FA,	//0x0938		VoC_lw16i_set_inc(REG0,0x8,0x20)(lo)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0x07000008,	//0x093a		VoC_add16_rd(REG0,REG0,0x4886)(lo)	|	VoC_lw16i_set_inc(REG0,0x8,0x20)(hi)
0x0A924886,	//0x093c		VoC_lw16i(INC2,0x20)(lo)	|	VoC_add16_rd(REG0,REG0,0x4886)(hi)
0x07020020,	//0x093e		VoC_add16_rd(REG2,REG0,0x84)(lo)	|	VoC_lw16i(INC2,0x20)(hi)
0xD4030084,	//0x0940		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0x84)(hi)
0xD4917FC0,	//0x0942		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF40277D9,	//0x0944		VoC_lw16i_short(FORMATX,0x0,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0xfffffffe,DEFAULT)
0x7FC0D403,	//0x0946		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0xF099D491,	//0x0948		VoC_lw16i_short(FORMAT32,0x4,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x1404D403,	//0x094a		VoC_lw16_d(REG4,0x4887)(lo)	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x14004887,	//0x094c		VoC_lw16_d(REG0,0x4887)(lo)	|	VoC_lw16_d(REG4,0x4887)(hi)
0x14054887,	//0x094e		VoC_lw16_d(REG5,0x4056)(lo)	|	VoC_lw16_d(REG0,0x4887)(hi)
0xC92C4056,	//0x0950		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_lw16_d(REG5,0x4056)(hi)
0xFF457A7C,	//0x0952		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0x070C2B80,	//0x0954		VoC_jal(sbc_dec_calip)
0x00814835,	//0x0956		VoC_blt16_rd(SBC_DEC_SYS_CH1_3,REG5,0x81)
0x00820724,	//0x0958		VoC_add16_rd(REG4,REG4,0x82)
0x00830700,	//0x095a		VoC_add16_rd(REG0,REG0,0x83)
		//0x095c		SBC_DEC_SYS_CH1_3
0x00820724,	//0x095c		VoC_add16_rd(REG4,REG4,0x82)
0x00830700,	//0x095e		VoC_add16_rd(REG0,REG0,0x83)
0xDC48DF81,	//0x0960		VoC_sw16_p(ACC0_LO,REG4,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0xDF875F01,	//0x0962		VoC_pop16(REG7,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDFA9DF84,	//0x0964		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xE580FFC0,	//0x0966		VoC_return	|	VoC_NOP
		//0x0968		sbc_dec_analyze_four
0xDFC4DFE9,	//0x0968		VoC_push16(REG4,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0xDFC75F41,	//0x096a		VoC_push16(REG7,IN_PARALLEL)	|	VoC_push32(REG23,DEFAULT)
0x48871500,	//0x096c		VoC_sw16_d(REG0,0x4887)
0x31C4D824,	//0x096e		VoC_bnez16_r(LABEL_COMPUTER_SUB4_CPY_FILTER,REG4)(lo)	|	VoC_lw16_p(REG4,REG2,DEFAULT)
0x1FB80982,	//0x0970		VoC_lw16i_set_inc(REG0,0x7e,0xfffffffe)(lo)	|	VoC_bnez16_r(LABEL_COMPUTER_SUB4_CPY_FILTER,REG4)(hi)
0x5FC2007E,	//0x0972		VoC_push16(REG2,DEFAULT)	|	VoC_lw16i_set_inc(REG0,0x7e,0xfffffffe)(hi)
0x0A82F3FA,	//0x0974		VoC_lw16i(REG2,0x46)(lo)	|	VoC_lw16i_short(INC2,0xfffffffe,IN_PARALLEL)
0x409A0046,	//0x0976		VoC_add16_rr(REG2,REG2,REG3,DEFAULT)	|	VoC_lw16i(REG2,0x46)(hi)
0x2C48C018,	//0x0978		VoC_loop_i(0x0,0x24)(lo)	|	VoC_add16_rr(REG0,REG0,REG3,IN_PARALLEL)
0xD9D4097E,	//0x097a		VoC_lw32inc_p(ACC0,REG2,DEFAULT)	|	VoC_loop_i(0x0,0x24)(hi)
0xDDC4FFC0,	//0x097c		VoC_sw32inc_p(ACC0,REG0,DEFAULT)	|	VoC_NOP
		//0x097e		VoC_endloop0
0x0A84FFC0,	//0x097e		VoC_lw16i(REG4,0x38)(lo)	|	VoC_NOP
0xDF820038,	//0x0980		VoC_pop16(REG2,DEFAULT)	|	VoC_lw16i(REG4,0x38)(hi)
		//0x0982		LABEL_COMPUTER_SUB4_CPY_FILTER
0x008307A4,	//0x0982		VoC_sub16_rd(REG4,REG4,0x83)
0xDC24C0E3,	//0x0984		VoC_sw16_p(REG4,REG2,DEFAULT)	|	VoC_add16_rr(REG3,REG3,REG4,DEFAULT)
0x48861503,	//0x0986		VoC_sw16_d(REG3,0x4886)
0x00061FB8,	//0x0988		VoC_lw16i_set_inc(REG0,0x6,0xfffffffe)
0xC0087051,	//0x098a		VoC_add16_rr(REG0,REG0,REG1,IN_PARALLEL)	|	VoC_lw16i_short(INC1,0x2,DEFAULT)
0xD9C5D9CC,	//0x098c		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xC92CCB2F,	//0x098e		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_sub32_rr(RL7,ACC0,ACC1,DEFAULT)
0x48601587,	//0x0990		VoC_sw32_d(RL7,0x4860)
0x48621584,	//0x0992		VoC_sw32_d(ACC0,0x4862)
0xD9C5D9CC,	//0x0994		VoC_lw32inc_p(ACC1,REG0,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG1,DEFAULT)
0xC92CCB2F,	//0x0996		VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)	|	VoC_sub32_rr(RL7,ACC0,ACC1,DEFAULT)
0x00820709,	//0x0998		VoC_add16_rd(REG1,REG1,0x82)
0x48641587,	//0x099a		VoC_sw32_d(RL7,0x4864)
0x48661584,	//0x099c		VoC_sw32_d(ACC0,0x4866)
0x0921DFC1,	//0x099e		VoC_add32_rd(REG23,ACC0,0x4862)(lo)	|	VoC_push16(REG1,DEFAULT)
0x09094862,	//0x09a0		VoC_add32_rd(REG23,REG23,0xe86)(lo)	|	VoC_add32_rd(REG23,ACC0,0x4862)(hi)
0xFA790E86,	//0x09a2		VoC_shr32_ri(REG23,0xf,DEFAULT)	|	VoC_add32_rd(REG23,REG23,0xe86)(hi)
0x00850B12,	//0x09a4		VoC_sub16_dr(REG2,0x85,REG2)
0x48861406,	//0x09a6		VoC_lw16_d(REG6,0x4886)
0x0DF10736,	//0x09a8		VoC_add16_rd(REG6,REG6,0xdf1)
0x48620BA4,	//0x09aa		VoC_sub32_dr(ACC0,0x4862,ACC0)
0x140ADC62,	//0x09ac		VoC_lw16_d(ACC1_LO,0xe7e)(lo)	|	VoC_sw16_p(REG2,REG6,DEFAULT)
0xFFC00E7E,	//0x09ae		VoC_NAD	|	VoC_lw16_d(ACC1_LO,0xe7e)(hi)
0x06F62B80,	//0x09b0		VoC_jal(sbc_mult16s_32s_hi)
0x0E860921,	//0x09b2		VoC_add32_rd(REG23,ACC0,0xe86)
0x1406FA79,	//0x09b4		VoC_lw16_d(REG6,0x4886)(lo)	|	VoC_shr32_ri(REG23,0xf,DEFAULT)
0xF0074886,	//0x09b6		VoC_lw16i_short(REG7,0x0,DEFAULT)	|	VoC_lw16_d(REG6,0x4886)(hi)
0x0736DC62,	//0x09b8		VoC_add16_rd(REG6,REG6,0x81)(lo)	|	VoC_sw16_p(REG2,REG6,DEFAULT)
0x0B120081,	//0x09ba		VoC_sub16_dr(REG2,0x85,REG2)(lo)	|	VoC_add16_rd(REG6,REG6,0x81)(hi)
0xDC670085,	//0x09bc		VoC_sw16_p(REG7,REG6,DEFAULT)	|	VoC_sub16_dr(REG2,0x85,REG2)(hi)
0x0DEE0736,	//0x09be		VoC_add16_rd(REG6,REG6,0xdee)
0x48601484,	//0x09c0		VoC_lw32_d(ACC0,0x4860)
0x140ADC62,	//0x09c2		VoC_lw16_d(ACC1_LO,0xe7f)(lo)	|	VoC_sw16_p(REG2,REG6,DEFAULT)
0x2B800E7F,	//0x09c4		VoC_jal(sbc_mult16s_32s_hi)(lo)	|	VoC_lw16_d(ACC1_LO,0xe7f)(hi)
0xFF2006F6,	//0x09c6		VoC_movreg32(REG01,ACC0,DEFAULT)	|	VoC_jal(sbc_mult16s_32s_hi)(hi)
0x4860093C,	//0x09c8		VoC_add32_rd(ACC0,RL7,0x4860)
0x0E80140A,	//0x09ca		VoC_lw16_d(ACC1_LO,0xe80)
0x06F62B80,	//0x09cc		VoC_jal(sbc_mult16s_32s_hi)
0xFF3CFF21,	//0x09ce		VoC_movreg32(ACC0,RL7,DEFAULT)	|	VoC_movreg32(REG23,ACC0,DEFAULT)
0x0E81140A,	//0x09d0		VoC_lw16_d(ACC1_LO,0xe81)
0x06F62B80,	//0x09d2		VoC_jal(sbc_mult16s_32s_hi)
0x0900C808,	//0x09d4		VoC_add32_rd(REG01,REG01,0xe86)(lo)	|	VoC_add32_rr(REG01,REG01,REG23,DEFAULT)
0xFA780E86,	//0x09d6		VoC_shr32_ri(REG01,0xf,DEFAULT)	|	VoC_add32_rd(REG01,REG01,0xe86)(hi)
0x0DEF07B6,	//0x09d8		VoC_sub16_rd(REG6,REG6,0xdef)
0xDC60FFC0,	//0x09da		VoC_sw16_p(REG0,REG6,DEFAULT)	|	VoC_NOP
0x00850B00,	//0x09dc		VoC_sub16_dr(REG0,0x85,REG0)
0x0DEE0736,	//0x09de		VoC_add16_rd(REG6,REG6,0xdee)
0xDC60FFC0,	//0x09e0		VoC_sw16_p(REG0,REG6,DEFAULT)	|	VoC_NOP
0x0909CB09,	//0x09e2		VoC_add32_rd(REG23,REG23,0xe86)(lo)	|	VoC_sub32_rr(REG23,ACC0,REG23,DEFAULT)
0xFA790E86,	//0x09e4		VoC_shr32_ri(REG23,0xf,DEFAULT)	|	VoC_add32_rd(REG23,REG23,0xe86)(hi)
0x00850B12,	//0x09e6		VoC_sub16_dr(REG2,0x85,REG2)
0x0DEE0736,	//0x09e8		VoC_add16_rd(REG6,REG6,0xdee)
0xDC62FFC0,	//0x09ea		VoC_sw16_p(REG2,REG6,DEFAULT)	|	VoC_NOP
0x0DEE0736,	//0x09ec		VoC_add16_rd(REG6,REG6,0xdee)
0xDC62FFC0,	//0x09ee		VoC_sw16_p(REG2,REG6,DEFAULT)	|	VoC_NOP
0xFF457F44,	//0x09f0		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0xF4027019,	//0x09f2		VoC_lw16i_short(FORMATX,0x0,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0x0ED41809,	//0x09f4		VoC_lw16i_set_inc(REG1,0xed4,0x2)
0x0ED5180B,	//0x09f6		VoC_lw16i_set_inc(REG3,0xed5,0x2)
0x000C1880,	//0x09f8		VoC_lw16i_set_inc(REG0,0xc,0x10)
0x48860700,	//0x09fa		VoC_add16_rd(REG0,REG0,0x4886)
0x0702F212,	//0x09fc		VoC_add16_rd(REG2,REG0,0x82)(lo)	|	VoC_lw16i_short(INC2,0x10,DEFAULT)
0xD4010082,	//0x09fe		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0x82)(hi)
0xD4937FC0,	//0x0a00		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0x7FC0D401,	//0x0a02		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0xD401D493,	//0x0a04		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0xD4937FC0,	//0x0a06		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xD401F592,	//0x0a08		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(INC2,0xffffffec,DEFAULT)
0xD4937FC0,	//0x0a0a		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0x7FC0D401,	//0x0a0c		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0x1400D493,	//0x0a0e		VoC_lw16_d(REG0,0x4887)(lo)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0x7F474887,	//0x0a10		VoC_lw32z(RL7,DEFAULT)	|	VoC_lw16_d(REG0,0x4887)(hi)
0xCBE4C92C,	//0x0a12		VoC_sub32_rr(ACC0,RL7,ACC0,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,ACC1,IN_PARALLEL)
0x0E860924,	//0x0a14		VoC_add32_rd(ACC0,ACC0,0xe86)
0xFF457A7C,	//0x0a16		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0x070C2B80,	//0x0a18		VoC_jal(sbc_dec_calip)
0xFF44DC08,	//0x0a1a		VoC_lw32z(ACC0,DEFAULT)	|	VoC_sw16_p(ACC0_LO,REG0,DEFAULT)
0x00011830,	//0x0a1c		VoC_lw16i_set_inc(REG0,0x1,0xc)
0x48860700,	//0x0a1e		VoC_add16_rd(REG0,REG0,0x4886)
0x0702F192,	//0x0a20		VoC_add16_rd(REG2,REG0,0x81)(lo)	|	VoC_lw16i_short(INC2,0xc,DEFAULT)
0xD4010081,	//0x0a22		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_add16_rd(REG2,REG0,0x81)(hi)
0xD4937FC0,	//0x0a24		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xF092F090,	//0x0a26		VoC_lw16i_short(INC2,0x4,DEFAULT)	|	VoC_lw16i_short(INC0,0x4,DEFAULT)
0x7FC0D401,	//0x0a28		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0xF190D493,	//0x0a2a		VoC_lw16i_short(INC0,0xc,DEFAULT)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0xD401F192,	//0x0a2c		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(INC2,0xc,DEFAULT)
0xD4937FC0,	//0x0a2e		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xF092F090,	//0x0a30		VoC_lw16i_short(INC2,0x4,DEFAULT)	|	VoC_lw16i_short(INC0,0x4,DEFAULT)
0x7FC0D401,	//0x0a32		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0x7190D493,	//0x0a34		VoC_lw16i_short(INC0,0xc,DEFAULT)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0x7011F032,	//0x0a36		VoC_lw16i_short(INC1,0x0,DEFAULT)	|	VoC_lw16i_short(INC2,0xc,IN_PARALLEL)
0x77F9F003,	//0x0a38		VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)	|	VoC_lw16i_short(INC3,0x0,IN_PARALLEL)
0xD401F5FA,	//0x0a3a		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(FORMATX,0xffffffff,IN_PARALLEL)
0xD4937FC0,	//0x0a3c		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xF0127090,	//0x0a3e		VoC_lw16i_short(INC2,0x4,IN_PARALLEL)	|	VoC_lw16i_short(INC0,0x4,DEFAULT)
0xF7D1F7D3,	//0x0a40		VoC_lw16i_short(INC1,0xfffffffe,DEFAULT)	|	VoC_lw16i_short(INC3,0xfffffffe,DEFAULT)
0x7FC0D403,	//0x0a42		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x7190D491,	//0x0a44		VoC_lw16i_short(INC0,0xc,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x7019F032,	//0x0a46		VoC_lw16i_short(FORMAT32,0x0,DEFAULT)	|	VoC_lw16i_short(INC2,0xc,IN_PARALLEL)
0xD403F402,	//0x0a48		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(FORMATX,0x0,IN_PARALLEL)
0xD4917FC0,	//0x0a4a		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0xF092F090,	//0x0a4c		VoC_lw16i_short(INC2,0x4,DEFAULT)	|	VoC_lw16i_short(INC0,0x4,DEFAULT)
0x7FC0D403,	//0x0a4e		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0xF190D491,	//0x0a50		VoC_lw16i_short(INC0,0xc,DEFAULT)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0xD403F192,	//0x0a52		VoC_mac32inc_pp(REG0,REG3,DEFAULT)	|	VoC_lw16i_short(INC2,0xc,DEFAULT)
0xD4917FC0,	//0x0a54		VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)	|	VoC_NOP
0x7FC0D403,	//0x0a56		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG3,DEFAULT)
0x1406D491,	//0x0a58		VoC_lw16_d(REG6,0x4887)(lo)	|	VoC_macXinc_pp(REG2,REG1,IN_PARALLEL)
0x14074887,	//0x0a5a		VoC_lw16_d(REG7,0x4887)(lo)	|	VoC_lw16_d(REG6,0x4887)(hi)
0x14054887,	//0x0a5c		VoC_lw16_d(REG5,0x4056)(lo)	|	VoC_lw16_d(REG7,0x4887)(hi)
0x4BE44056,	//0x0a5e		VoC_sub32_rr(ACC0,RL7,ACC0,DEFAULT)	|	VoC_lw16_d(REG5,0x4056)(hi)
0x0924CBED,	//0x0a60		VoC_add32_rd(ACC0,ACC0,0xe86)(lo)	|	VoC_sub32_rr(ACC1,RL7,ACC1,IN_PARALLEL)
0x092D0E86,	//0x0a62		VoC_add32_rd(ACC1,ACC1,0xe86)(lo)	|	VoC_add32_rd(ACC0,ACC0,0xe86)(hi)
0x7A7C0E86,	//0x0a64		VoC_shr32_ri(ACC0,0xf,DEFAULT)	|	VoC_add32_rd(ACC1,ACC1,0xe86)(hi)
0xFFC0FA7D,	//0x0a66		VoC_NAD	|	VoC_shr32_ri(ACC1,0xf,IN_PARALLEL)
0x070C2B80,	//0x0a68		VoC_jal(sbc_dec_calip)
0x00814835,	//0x0a6a		VoC_blt16_rd(SBC_DEC_SYS4_CH1_0,REG5,0x81)
0x00800736,	//0x0a6c		VoC_add16_rd(REG6,REG6,0x80)
0x0086073F,	//0x0a6e		VoC_add16_rd(REG7,REG7,0x86)
		//0x0a70		SBC_DEC_SYS4_CH1_0
0x00800736,	//0x0a70		VoC_add16_rd(REG6,REG6,0x80)
0x0086073F,	//0x0a72		VoC_add16_rd(REG7,REG7,0x86)
0xDC7ADC68,	//0x0a74		VoC_sw16_p(ACC1_LO,REG7,DEFAULT)	|	VoC_sw16_p(ACC0_LO,REG6,DEFAULT)
0xFF457F44,	//0x0a76		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x004E1F80,	//0x0a78		VoC_lw16i_set_inc(REG0,0x4e,0xfffffff0)
0x48860700,	//0x0a7a		VoC_add16_rd(REG0,REG0,0x4886)
0x000E1882,	//0x0a7c		VoC_lw16i_set_inc(REG2,0xe,0x10)
0x48860712,	//0x0a7e		VoC_add16_rd(REG2,REG2,0x4886)
0x0EE81809,	//0x0a80		VoC_lw16i_set_inc(REG1,0xee8,0x2)
0x0EE9180B,	//0x0a82		VoC_lw16i_set_inc(REG3,0xee9,0x2)
0x7FC0D401,	//0x0a84		VoC_NOP	|	VoC_mac32inc_pp(REG0,REG1,DEFAULT)
0xD401D493,	//0x0a86		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)
0xD4937FC0,	//0x0a88		VoC_macXinc_pp(REG2,REG3,IN_PARALLEL)	|	VoC_NOP
0xD401F7F9,	//0x0a8a		VoC_mac32inc_pp(REG0,REG1,DEFAULT)	|	VoC_lw16i_short(FORMAT32,0xffffffff,DEFAULT)
0x48871404,	//0x0a8c		VoC_lw16_d(REG4,0x4887)
0x48871400,	//0x0a8e		VoC_lw16_d(REG0,0x4887)
0x40561405,	//0x0a90		VoC_lw16_d(REG5,0x4056)
0xCBE4C92C,	//0x0a92		VoC_sub32_rr(ACC0,RL7,ACC0,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
0x0E860924,	//0x0a94		VoC_add32_rd(ACC0,ACC0,0xe86)
0xFF457A7C,	//0x0a96		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xf,DEFAULT)
0x070C2B80,	//0x0a98		VoC_jal(sbc_dec_calip)
0x00814835,	//0x0a9a		VoC_blt16_rd(SBC_DEC_SYS4_CH1_2,REG5,0x81)
0x00810724,	//0x0a9c		VoC_add16_rd(REG4,REG4,0x81)
0x00820700,	//0x0a9e		VoC_add16_rd(REG0,REG0,0x82)
		//0x0aa0		SBC_DEC_SYS4_CH1_2
0x00810724,	//0x0aa0		VoC_add16_rd(REG4,REG4,0x81)
0x00820700,	//0x0aa2		VoC_add16_rd(REG0,REG0,0x82)
0xDC48DF81,	//0x0aa4		VoC_sw16_p(ACC0_LO,REG4,DEFAULT)	|	VoC_pop16(REG1,DEFAULT)
0xDF875F01,	//0x0aa6		VoC_pop16(REG7,IN_PARALLEL)	|	VoC_pop32(REG23,DEFAULT)
0xDFA9DF84,	//0x0aa8		VoC_pop16(RA,DEFAULT)	|	VoC_pop16(REG4,DEFAULT)
0xE580FFC0,	//0x0aaa		VoC_return	|	VoC_NOP
		//0x0aac		sbc_synthesize_audio
0xDF465FE9,	//0x0aac		VoC_push32(RL6,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x40591400,	//0x0aae		VoC_lw16_d(REG0,0x4059)
0x00834420,	//0x0ab0		VoC_bne16_rd(LABEL_SYN_4,REG0,0x83)
0x0AD22B00,	//0x0ab2		VoC_jump_lg(LABEL_SYN_8)
		//0x0ab4		LABEL_SYN_4
0x42A80A80,	//0x0ab4		VoC_lw16i(REG0,0x42a8)
0x40A81809,	//0x0ab6		VoC_lw16i_set_inc(REG1,0x40a8,0x2)
0x475E0A82,	//0x0ab8		VoC_lw16i(REG2,0x475e)
0x47600A83,	//0x0aba		VoC_lw16i(REG3,0x4760)
0xF007F004,	//0x0abc		VoC_lw16i_short(REG7,0x0,DEFAULT)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
		//0x0abd		LABLE_SYNTHESIZE4_CH
		//0x0abe		LABLE_SYNTHESIZE4_BLK
0x09682B80,	//0x0abe		VoC_jal(sbc_dec_analyze_four)
0x0080073F,	//0x0ac0		VoC_add16_rd(REG7,REG7,0x80)
0x405447A7,	//0x0ac2		VoC_bne16_rd(LABLE_SYNTHESIZE4_BLK,REG7,0x4054)
0x42A80A80,	//0x0ac4		VoC_lw16i(REG0,0x42a8)
0x00800700,	//0x0ac6		VoC_add16_rd(REG0,REG0,0x80)
0x00800712,	//0x0ac8		VoC_add16_rd(REG2,REG2,0x80)
0x0E83071B,	//0x0aca		VoC_add16_rd(REG3,REG3,0xe83)
0x00800724,	//0x0acc		VoC_add16_rd(REG4,REG4,0x80)
0x40564ABC,	//0x0ace		VoC_blt16_rd(LABLE_SYNTHESIZE4_CH,REG4,0x4056)
0xFFC065DE,	//0x0ad0		VoC_NAD(IN_PARALLEL)	|	VoC_jump(sbc_synthesize_audio_end)
		//0x0ad2		LABEL_SYN_8
0x42A80A80,	//0x0ad2		VoC_lw16i(REG0,0x42a8)
0x40A81809,	//0x0ad4		VoC_lw16i_set_inc(REG1,0x40a8,0x2)
0x475E0A82,	//0x0ad6		VoC_lw16i(REG2,0x475e)
0x47600A83,	//0x0ad8		VoC_lw16i(REG3,0x4760)
0xF007F004,	//0x0ada		VoC_lw16i_short(REG7,0x0,DEFAULT)	|	VoC_lw16i_short(REG4,0x0,DEFAULT)
		//0x0adb		LABLE_SYNTHESIZE_CH
		//0x0adc		LABLE_SYNTHESIZE_BLK
0x07222B80,	//0x0adc		VoC_jal(sbc_dec_analyze_eight)
0x0080073F,	//0x0ade		VoC_add16_rd(REG7,REG7,0x80)
0x405447A7,	//0x0ae0		VoC_bne16_rd(LABLE_SYNTHESIZE_BLK,REG7,0x4054)
0x42A80A80,	//0x0ae2		VoC_lw16i(REG0,0x42a8)
0x00800700,	//0x0ae4		VoC_add16_rd(REG0,REG0,0x80)
0x00800712,	//0x0ae6		VoC_add16_rd(REG2,REG2,0x80)
0x0E83071B,	//0x0ae8		VoC_add16_rd(REG3,REG3,0xe83)
0x00800724,	//0x0aea		VoC_add16_rd(REG4,REG4,0x80)
0x40564ABC,	//0x0aec		VoC_blt16_rd(LABLE_SYNTHESIZE_CH,REG4,0x4056)
		//0x0aee		sbc_synthesize_audio_end
0x40541405,	//0x0aee		VoC_lw16_d(REG5,0x4054)
0x4059082D,	//0x0af0		VoC_mult16_rd(REG5,REG5,0x4059)
0x082DFFC0,	//0x0af2		VoC_mult16_rd(REG5,REG5,0x4056)(lo)	|	VoC_NOP
0xFFC04056,	//0x0af4		VoC_NOP	|	VoC_mult16_rd(REG5,REG5,0x4056)(hi)
0x5FA9F80D,	//0x0af6		VoC_pop16(RA,DEFAULT)	|	VoC_shr16_ri(REG5,0x1,DEFAULT)
0x1505DF46,	//0x0af8		VoC_sw16_d(REG5,0x405e)(lo)	|	VoC_push32(RL6,IN_PARALLEL)
0xE580405E,	//0x0afa		VoC_return	|	VoC_sw16_d(REG5,0x405e)(hi)
		//0x0afc		sbc_calculate_band_info_init
0xFF44DFE9,	//0x0afc		VoC_lw32z(ACC0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x519A1809,	//0x0afe		VoC_lw16i_set_inc(REG1,0x519a,0x2)
0x0B022C10,	//0x0b00		VoC_loop_i(0x0,0x8)
		//0x0b02		VoC_endloop0
0xDFA9DDCC,	//0x0b02		VoC_pop16(RA,DEFAULT)	|	VoC_sw32inc_p(ACC0,REG1,DEFAULT)
0xE580FFC0,	//0x0b04		VoC_return	|	VoC_NOP
		//0x0b06		sbc_calculate_band_info
0x6E05DFE9,	//0x0b06		VoC_bnez16_d(SBC_DECODE_BAND_INFO,0x5198)(lo)	|	VoC_push16(RA,DEFAULT)
0x2B005198,	//0x0b08		VoC_jump_lg(SBC_DECODE_BAND_INFO_END)(lo)	|	VoC_bnez16_d(SBC_DECODE_BAND_INFO,0x5198)(hi)
0xFFC00B55,	//0x0b0a		VoC_NAD	|	VoC_jump_lg(SBC_DECODE_BAND_INFO_END)(hi)
		//0x0b0c		SBC_DECODE_BAND_INFO
0x40591405,	//0x0b0c		VoC_lw16_d(REG5,0x4059)
0x40541406,	//0x0b0e		VoC_lw16_d(REG6,0x4054)
0x40560836,	//0x0b10		VoC_mult16_rd(REG6,REG6,0x4056)
0xE0877F47,	//0x0b12		VoC_lw16i_short(REG7,0x8,IN_PARALLEL)	|	VoC_lw32z(RL7,DEFAULT)
0x40A80A80,	//0x0b14		VoC_lw16i(REG0,0x40a8)
0x40A80A81,	//0x0b16		VoC_lw16i(REG1,0x40a8)
0x519A180A,	//0x0b18		VoC_lw16i_set_inc(REG2,0x519a,0x2)
0xE0B0F8F5,	//0x0b1a		VoC_movreg16(INC0,REG5,DEFAULT)	|	VoC_shr16_ri(REG5,0xfffffffe,DEFAULT)
0xF80DE0B1,	//0x0b1c		VoC_shr16_ri(REG5,0x1,DEFAULT)	|	VoC_movreg16(INC1,REG5,DEFAULT)
0x780DC069,	//0x0b1e		VoC_shr16_ri(REG5,0x1,DEFAULT)	|	VoC_add16_rr(REG1,REG1,REG5,DEFAULT)
0xFFC0F80E,	//0x0b20		VoC_NAD	|	VoC_shr16_ri(REG6,0x1,IN_PARALLEL)
0x0B3C2E28,	//0x0b22		VoC_loop_r(0,REG5)
0xDF407F46,	//0x0b24		VoC_push32(REG01,IN_PARALLEL)	|	VoC_lw32z(RL6,DEFAULT)
0x0B352E31,	//0x0b26		VoC_loop_r(1,REG6)
0xD9CDD9C4,	//0x0b28		VoC_lw32inc_p(ACC1,REG1,DEFAULT)	|	VoC_lw32inc_p(ACC0,REG0,DEFAULT)
0x0B2E3284,	//0x0b2a		VoC_bgtz32_r(SBC_DECODE_BAND_INFO_N0,ACC0)
0xFFC04BE4,	//0x0b2c		VoC_NAD(IN_PARALLEL)	|	VoC_sub32_rr(ACC0,RL7,ACC0,DEFAULT)
		//0x0b2e		SBC_DECODE_BAND_INFO_N0
0x0B323285,	//0x0b2e		VoC_bgtz32_r(SBC_DECODE_BAND_INFO_N1,ACC1)
0xFFC04BED,	//0x0b30		VoC_NAD(IN_PARALLEL)	|	VoC_sub32_rr(ACC1,RL7,ACC1,DEFAULT)
		//0x0b32		SBC_DECODE_BAND_INFO_N1
0xFA857A84,	//0x0b32		VoC_shr32_ri(ACC1,0x10,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0x10,DEFAULT)
0xC9A6C92C,	//0x0b34		VoC_add32_rr(RL6,RL6,ACC0,DEFAULT)	|	VoC_add32_rr(ACC0,ACC0,ACC1,DEFAULT)
		//0x0b35		VoC_endloop1
0x9196DF00,	//0x0b36		VoC_add32_rp(RL6,RL6,REG2,DEFAULT)	|	VoC_pop32(REG01,DEFAULT)
0x00810700,	//0x0b38		VoC_add16_rd(REG0,REG0,0x81)
0x00810709,	//0x0b3a		VoC_add16_rd(REG1,REG1,0x81)
		//0x0b3c		VoC_endloop0
0x4187DDD6,	//0x0b3c		VoC_be16_rd(SBC_DECODE_BAND_INFO_END,REG7,0x4059)(lo)	|	VoC_sw32inc_p(RL6,REG2,DEFAULT)
0x14844059,	//0x0b3e		VoC_lw32_d(ACC0,0x51a0)(lo)	|	VoC_be16_rd(SBC_DECODE_BAND_INFO_END,REG7,0x4059)(hi)
0x148551A0,	//0x0b40		VoC_lw32_d(ACC1,0x519e)(lo)	|	VoC_lw32_d(ACC0,0x51a0)(hi)
0x1584519E,	//0x0b42		VoC_sw32_d(ACC0,0x51a6)(lo)	|	VoC_lw32_d(ACC1,0x519e)(hi)
0x158451A6,	//0x0b44		VoC_sw32_d(ACC0,0x51a8)(lo)	|	VoC_sw32_d(ACC0,0x51a6)(hi)
0x158551A8,	//0x0b46		VoC_sw32_d(ACC1,0x51a2)(lo)	|	VoC_sw32_d(ACC0,0x51a8)(hi)
0x158551A2,	//0x0b48		VoC_sw32_d(ACC1,0x51a4)(lo)	|	VoC_sw32_d(ACC1,0x51a2)(hi)
0x148451A4,	//0x0b4a		VoC_lw32_d(ACC0,0x519c)(lo)	|	VoC_sw32_d(ACC1,0x51a4)(hi)
0x1485519C,	//0x0b4c		VoC_lw32_d(ACC1,0x519a)(lo)	|	VoC_lw32_d(ACC0,0x519c)(hi)
0x1584519A,	//0x0b4e		VoC_sw32_d(ACC0,0x519e)(lo)	|	VoC_lw32_d(ACC1,0x519a)(hi)
0x1584519E,	//0x0b50		VoC_sw32_d(ACC0,0x51a0)(lo)	|	VoC_sw32_d(ACC0,0x519e)(hi)
0x158551A0,	//0x0b52		VoC_sw32_d(ACC1,0x519c)(lo)	|	VoC_sw32_d(ACC0,0x51a0)(hi)
0xDFA9519C,	//0x0b54		VoC_pop16(RA,DEFAULT)	|	VoC_sw32_d(ACC1,0x519c)(hi)
		//0x0b55		SBC_DECODE_BAND_INFO_END
0xE580FFC0,	//0x0b56		VoC_return	|	VoC_NOP
		//0x0b58		sbc_mixing_audio
0xE0205FE9,	//0x0b58		VoC_lw16i_short(REG0,0x2,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x40564020,	//0x0b5a		VoC_be16_rd(SBC_MIXING_AUDIO_START,REG0,0x4056)
0x0B8E2B00,	//0x0b5c		VoC_jump_lg(SBC_MIXING_AUDIO_END)
		//0x0b5e		SBC_MIXING_AUDIO_START
0x4510F020,	//0x0b5e		VoC_bne16_rd(SBC_MIXING_AUDIO_L0,REG0,0x4c88)(lo)	|	VoC_lw16i_short(REG0,0x1,DEFAULT)
0x18094C88,	//0x0b60		VoC_lw16i_set_inc(REG1,0x42a8,0x2)(lo)	|	VoC_bne16_rd(SBC_MIXING_AUDIO_L0,REG0,0x4c88)(hi)
0x180442A8,	//0x0b62		VoC_lw16i_set_inc(REG0,0x42a8,0x1)(lo)	|	VoC_lw16i_set_inc(REG1,0x42a8,0x2)(hi)
0x140242A8,	//0x0b64		VoC_lw16_d(REG2,0x405e)(lo)	|	VoC_lw16i_set_inc(REG0,0x42a8,0x1)(hi)
0xD9CA405E,	//0x0b66		VoC_lw32inc_p(REG45,REG1,DEFAULT)	|	VoC_lw16_d(REG2,0x405e)(hi)
0x0B6F2E10,	//0x0b68		VoC_loop_r(0,REG2)
0xF80DF80C,	//0x0b6a		VoC_shr16_ri(REG5,0x1,DEFAULT)	|	VoC_shr16_ri(REG4,0x1,DEFAULT)
0xD9CAC12E,	//0x0b6c		VoC_lw32inc_p(REG45,REG1,DEFAULT)	|	VoC_add16_rr(REG6,REG4,REG5,DEFAULT)
0xDC86DC86,	//0x0b6e		VoC_sw16inc_p(REG6,REG0,DEFAULT)	|	VoC_sw16inc_p(REG6,REG0,DEFAULT)
		//0x0b6f		VoC_endloop0
0xF040E5DE,	//0x0b70		VoC_lw16i_short(REG0,0x2,DEFAULT)	|	VoC_jump(SBC_MIXING_AUDIO_END)
		//0x0b71		SBC_MIXING_AUDIO_L0
0x4C8844B0,	//0x0b72		VoC_bne16_rd(SBC_MIXING_AUDIO_L1,REG0,0x4c88)
0x42A81808,	//0x0b74		VoC_lw16i_set_inc(REG0,0x42a8,0x2)
0x42A91809,	//0x0b76		VoC_lw16i_set_inc(REG1,0x42a9,0x2)
0x405E1402,	//0x0b78		VoC_lw16_d(REG2,0x405e)
0x0B7E2E10,	//0x0b7a		VoC_loop_r(0,REG2)
0xFFC0D884,	//0x0b7c		VoC_NOP	|	VoC_lw16inc_p(REG4,REG0,DEFAULT)
		//0x0b7e		VoC_endloop0
0xE5CFDC94,	//0x0b7e		VoC_jump(SBC_MIXING_AUDIO_END)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
		//0x0b80		SBC_MIXING_AUDIO_L1
0x44A8F060,	//0x0b80		VoC_bne16_rd(SBC_MIXING_AUDIO_END,REG0,0x4c88)(lo)	|	VoC_lw16i_short(REG0,0x3,DEFAULT)
0x18084C88,	//0x0b82		VoC_lw16i_set_inc(REG0,0x42a9,0x2)(lo)	|	VoC_bne16_rd(SBC_MIXING_AUDIO_END,REG0,0x4c88)(hi)
0x180942A9,	//0x0b84		VoC_lw16i_set_inc(REG1,0x42a8,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x42a9,0x2)(hi)
0x140242A8,	//0x0b86		VoC_lw16_d(REG2,0x405e)(lo)	|	VoC_lw16i_set_inc(REG1,0x42a8,0x2)(hi)
0x2E10405E,	//0x0b88		VoC_loop_r(0,REG2)(lo)	|	VoC_lw16_d(REG2,0x405e)(hi)
0xD8840B8D,	//0x0b8a		VoC_lw16inc_p(REG4,REG0,DEFAULT)	|	VoC_loop_r(0,REG2)(hi)
0xDC94FFC0,	//0x0b8c		VoC_sw16inc_p(REG4,REG1,DEFAULT)	|	VoC_NOP
		//0x0b8d		VoC_endloop0
		//0x0b8e		SBC_MIXING_AUDIO_END
0xFFC0DFA9,	//0x0b8e		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x0b90		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x0b91		sbc_detect_mute
0xE0137002,	//0x0b92		VoC_lw16i_short(REG3,0x1,IN_PARALLEL)	|	VoC_lw16i_short(REG2,0x0,DEFAULT)
0x42A81804,	//0x0b94		VoC_lw16i_set_inc(REG0,0x42a8,0x1)
0x405E1401,	//0x0b96		VoC_lw16_d(REG1,0x405e)
0x1502F8F9,	//0x0b98		VoC_sw16_d(REG2,0x4cee)(lo)	|	VoC_shr16_ri(REG1,0xffffffff,DEFAULT)
0x2E084CEE,	//0x0b9a		VoC_loop_r(0,REG1)(lo)	|	VoC_sw16_d(REG2,0x4cee)(hi)
0xD8850BA3,	//0x0b9c		VoC_lw16inc_p(REG5,REG0,DEFAULT)	|	VoC_loop_r(0,REG1)(hi)
0x383DFFC0,	//0x0b9e		VoC_bgt16_rd(sbc_detect_mute_L0,REG5,0x4cde)(lo)	|	VoC_NOP
0x482D4CDE,	//0x0ba0		VoC_blt16_rd(sbc_detect_mute_L0,REG5,0x4ce0)(lo)	|	VoC_bgt16_rd(sbc_detect_mute_L0,REG5,0x4cde)(hi)
0xFFC04CE0,	//0x0ba2		VoC_NAD	|	VoC_blt16_rd(sbc_detect_mute_L0,REG5,0x4ce0)(hi)
		//0x0ba3		VoC_endloop0
0x4CEE1503,	//0x0ba4		VoC_sw16_d(REG3,0x4cee)
		//0x0ba6		sbc_detect_mute_L0
0xFFC0DFA9,	//0x0ba6		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xFFC06580,	//0x0ba8		VoC_NAD(IN_PARALLEL)	|	VoC_return
		//0x0baa		sbc_44_1k_to_48k_filter
0xE0045FE9,	//0x0baa		VoC_lw16i_short(REG4,0x0,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0xF4027019,	//0x0bac		VoC_lw16i_short(FORMATX,0x0,IN_PARALLEL)	|	VoC_lw16i_short(FORMAT32,0x0,DEFAULT)
0x4E321504,	//0x0bae		VoC_sw16_d(REG4,0x4e32)
0x405E1504,	//0x0bb0		VoC_sw16_d(REG4,0x405e)
0x42A81808,	//0x0bb2		VoC_lw16i_set_inc(REG0,0x42a8,0x2)
0x4D1A1809,	//0x0bb4		VoC_lw16i_set_inc(REG1,0x4d1a,0x2)
		//0x0bb6		sbc_44_1k_to_48k_filter_begain
0x4CEC1405,	//0x0bb6		VoC_lw16_d(REG5,0x4cec)
0x4E323825,	//0x0bb8		VoC_bgt16_rd(sbc_44_1k_to_48k_filter_begain0,REG5,0x4e32)
0x0C072B00,	//0x0bba		VoC_jump_lg(sbc_44_1k_to_48k_filter_end)
		//0x0bbc		sbc_44_1k_to_48k_filter_begain0
0x0D3E1403,	//0x0bbc		VoC_lw16_d(REG3,0xd3e)
0x4CF1071B,	//0x0bbe		VoC_add16_rd(REG3,REG3,0x4cf1)
0x0D3F4923,	//0x0bc0		VoC_blt16_rd(sbc_44_1k_to_48k_filter_L0,REG3,0xd3f)
0x0D3F079B,	//0x0bc2		VoC_sub16_rd(REG3,REG3,0xd3f)
0x180AD9C2,	//0x0bc4		VoC_lw16i_set_inc(REG2,0x4d16,0x2)(lo)	|	VoC_lw32inc_p(REG45,REG0,DEFAULT)
0xF0264D16,	//0x0bc6		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_lw16i_set_inc(REG2,0x4d16,0x2)(hi)
0x4E320736,	//0x0bc8		VoC_add16_rd(REG6,REG6,0x4e32)
0x0BCF2C26,	//0x0bca		VoC_loop_i(0x0,0x13)
0x0792D9D4,	//0x0bcc		VoC_sub16_rd(REG2,REG2,0x82)(lo)	|	VoC_lw32inc_p(ACC0,REG2,DEFAULT)
0xDD940082,	//0x0bce		VoC_sw32_p(ACC0,REG2,DEFAULT)	|	VoC_sub16_rd(REG2,REG2,0x82)(hi)
		//0x0bcf		VoC_endloop0
0x4CF21582,	//0x0bd0		VoC_sw32_d(REG45,0x4cf2)
0x4E321506,	//0x0bd2		VoC_sw16_d(REG6,0x4e32)
		//0x0bd4		sbc_44_1k_to_48k_filter_L0
0x4CF2180A,	//0x0bd4		VoC_lw16i_set_inc(REG2,0x4cf2,0x2)
0x4CF11503,	//0x0bd6		VoC_sw16_d(REG3,0x4cf1)
0x44E3F284,	//0x0bd8		VoC_mult16_rr(REG3,REG3,REG4,DEFAULT)	|	VoC_lw16i_short(REG4,0x14,DEFAULT)
0x0A84F007,	//0x0bda		VoC_lw16i(REG4,0xbe)(lo)	|	VoC_lw16i_short(INC3,0x1,IN_PARALLEL)
0xC0E300BE,	//0x0bdc		VoC_add16_rr(REG3,REG3,REG4,DEFAULT)	|	VoC_lw16i(REG4,0xbe)(hi)
0xFF457F44,	//0x0bde		VoC_lw32z(ACC1,IN_PARALLEL)	|	VoC_lw32z(ACC0,DEFAULT)
0x0BE32C28,	//0x0be0		VoC_loop_i(0x0,0x14)
0x5023D9D2,	//0x0be2		VoC_mac32_rp(REG4,REG3,DEFAULT)	|	VoC_lw32inc_p(REG45,REG2,DEFAULT)
		//0x0be3		VoC_endloop0
0xF026D16B,	//0x0be4		VoC_lw16i_short(REG6,0x1,DEFAULT)	|	VoC_macXinc_rp(REG5,REG3,IN_PARALLEL)
0x405E0736,	//0x0be6		VoC_add16_rd(REG6,REG6,0x405e)
0xFA657A64,	//0x0be8		VoC_shr32_ri(ACC1,0xc,IN_PARALLEL)	|	VoC_shr32_ri(ACC0,0xc,DEFAULT)
0x0D405434,	//0x0bea		VoC_bngt32_rd(sbc_44_1k_to_48k_filter_L_1,ACC0,0xd40)
0x7FFF0A84,	//0x0bec		VoC_lw16i(REG4,0x7fff)
0xFFC065C8,	//0x0bee		VoC_NAD(IN_PARALLEL)	|	VoC_jump(sbc_44_1k_to_48k_filter_L_end)
		//0x0bf0		sbc_44_1k_to_48k_filter_L_1
0x0D42502C,	//0x0bf0		VoC_bgt32_rd(sbc_44_1k_to_48k_filter_L_2,ACC0,0xd42)
0x00000AC4,	//0x0bf2		VoC_lw16i(REG4,0x8000)
0xE104E5C2,	//0x0bf4		VoC_movreg16(REG4,ACC0_LO,DEFAULT)	|	VoC_jump(sbc_44_1k_to_48k_filter_L_end)
		//0x0bf5		sbc_44_1k_to_48k_filter_L_2
		//0x0bf6		sbc_44_1k_to_48k_filter_L_end
0x0D405435,	//0x0bf6		VoC_bngt32_rd(sbc_44_1k_to_48k_filter_R_1,ACC1,0xd40)
0x7FFF0A85,	//0x0bf8		VoC_lw16i(REG5,0x7fff)
0xFFC065C8,	//0x0bfa		VoC_NAD(IN_PARALLEL)	|	VoC_jump(sbc_44_1k_to_48k_filter_R_end)
		//0x0bfc		sbc_44_1k_to_48k_filter_R_1
0x0D42502D,	//0x0bfc		VoC_bgt32_rd(sbc_44_1k_to_48k_filter_R_2,ACC1,0xd42)
0x00000AC5,	//0x0bfe		VoC_lw16i(REG5,0x8000)
0xE145E5C2,	//0x0c00		VoC_movreg16(REG5,ACC1_LO,DEFAULT)	|	VoC_jump(sbc_44_1k_to_48k_filter_R_end)
		//0x0c01		sbc_44_1k_to_48k_filter_R_2
		//0x0c02		sbc_44_1k_to_48k_filter_R_end
0x405E1506,	//0x0c02		VoC_sw16_d(REG6,0x405e)
0x2B00DDCA,	//0x0c04		VoC_jump_lg(sbc_44_1k_to_48k_filter_begain)(lo)	|	VoC_sw32inc_p(REG45,REG1,DEFAULT)
0xDFA90BB6,	//0x0c06		VoC_pop16(RA,DEFAULT)	|	VoC_jump_lg(sbc_44_1k_to_48k_filter_begain)(hi)
		//0x0c07		sbc_44_1k_to_48k_filter_end
0xE580FFC0,	//0x0c08		VoC_return	|	VoC_NOP
		//0x0c0a		RDA_SBCDEC_Digital_Gain
0x1808DFE9,	//0x0c0a		VoC_lw16i_set_inc(REG0,0x51aa,0x2)(lo)	|	VoC_push16(RA,DEFAULT)
0x180951AA,	//0x0c0c		VoC_lw16i_set_inc(REG1,0x51ab,0x2)(lo)	|	VoC_lw16i_set_inc(REG0,0x51aa,0x2)(hi)
0x180651AB,	//0x0c0e		VoC_lw16i_set_inc(REG2,0x0,0x1)(lo)	|	VoC_lw16i_set_inc(REG1,0x51ab,0x2)(hi)
0x14030000,	//0x0c10		VoC_lw16_d(REG3,0x4c90)(lo)	|	VoC_lw16i_set_inc(REG2,0x0,0x1)(hi)
0xF1D94C90,	//0x0c12		VoC_lw16i_short(FORMAT32,0xe,DEFAULT)	|	VoC_lw16_d(REG3,0x4c90)(hi)
		//0x0c14		SBCDecode_algorithm_gain_loop
0x98CD98C4,	//0x0c14		VoC_multf32_rp(ACC1,REG3,REG1,DEFAULT)	|	VoC_multf32_rp(ACC0,REG3,REG0,DEFAULT)
0xDC88DE10,	//0x0c16		VoC_sw16inc_p(ACC0_LO,REG0,DEFAULT)	|	VoC_inc_p(REG2,DEFAULT)
0x4B9ADC9A,	//0x0c18		VoC_blt16_rd(SBCDecode_algorithm_gain_loop,REG2,0x405e)(lo)	|	VoC_sw16inc_p(ACC1_LO,REG1,DEFAULT)
0xDFA9405E,	//0x0c1a		VoC_pop16(RA,DEFAULT)	|	VoC_blt16_rd(SBCDecode_algorithm_gain_loop,REG2,0x405e)(hi)
0xE580FFC0,	//0x0c1c		VoC_return	|	VoC_NOP
		//0x0c1e		RDA_SBCDEC_Change_Ch_Dual_To_Mono
0xE0205FE9,	//0x0c1e		VoC_lw16i_short(REG0,0x2,IN_PARALLEL)	|	VoC_push16(RA,DEFAULT)
0x40564018,	//0x0c20		VoC_be16_rd(SBC_CHANGE_CH_START,REG0,0x4056)
0xF020E5D9,	//0x0c22		VoC_lw16i_short(REG0,0x1,DEFAULT)	|	VoC_jump(SBC_CHANGE_CH_END)
		//0x0c23		SBC_CHANGE_CH_START
0x4C8A4538,	//0x0c24		VoC_bne16_rd(SBC_CHANGE_CH_END,REG0,0x4c8a)
0x51AA1804,	//0x0c26		VoC_lw16i_set_inc(REG0,0x51aa,0x1)
0x51AA1809,	//0x0c28		VoC_lw16i_set_inc(REG1,0x51aa,0x2)
0x00001806,	//0x0c2a		VoC_lw16i_set_inc(REG2,0x0,0x1)
		//0x0c2c		SBCDecode_change_ch_loop
0xDE10D893,	//0x0c2c		VoC_inc_p(REG2,DEFAULT)	|	VoC_lw16inc_p(REG3,REG1,DEFAULT)
0x4BAADC83,	//0x0c2e		VoC_blt16_rd(SBCDecode_change_ch_loop,REG2,0x405e)(lo)	|	VoC_sw16inc_p(REG3,REG0,DEFAULT)
0x1402405E,	//0x0c30		VoC_lw16_d(REG2,0x405e)(lo)	|	VoC_blt16_rd(SBCDecode_change_ch_loop,REG2,0x405e)(hi)
0x1403405E,	//0x0c32		VoC_lw16_d(REG3,0x404e)(lo)	|	VoC_lw16_d(REG2,0x405e)(hi)
0xF80A404E,	//0x0c34		VoC_shr16_ri(REG2,0x1,DEFAULT)	|	VoC_lw16_d(REG3,0x404e)(hi)
0x1502F80B,	//0x0c36		VoC_sw16_d(REG2,0x405e)(lo)	|	VoC_shr16_ri(REG3,0x1,DEFAULT)
0x1503405E,	//0x0c38		VoC_sw16_d(REG3,0x404e)(lo)	|	VoC_sw16_d(REG2,0x405e)(hi)
0xDFA9404E,	//0x0c3a		VoC_pop16(RA,DEFAULT)	|	VoC_sw16_d(REG3,0x404e)(hi)
		//0x0c3b		SBC_CHANGE_CH_END
0xE580FFC0,	//0x0c3c		VoC_return	|	VoC_NOP
