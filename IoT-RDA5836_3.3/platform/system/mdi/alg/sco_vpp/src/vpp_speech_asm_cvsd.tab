		//0x05d0		VoC_code_section_1
		//0x05d0		CVSD_LowPass_Filter1
0x701ADFE9,	//0x05d0		VoC_lw16i_short(FORMATX,0x0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x2C04F401,	//0x05d2		VoC_loop_i(0x0,0x2)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xD88406A5,	//0x05d4		VoC_lw16inc_p(REG4,REG0,DEFAULT)	|	VoC_loop_i(0x0,0x2)(hi)
0x1484D885,	//0x05d6		VoC_lw32_d(ACC0,0x63e0)(lo)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x148563E0,	//0x05d8		VoC_lw32_d(ACC1,0x63e0)(lo)	|	VoC_lw32_d(ACC0,0x63e0)(hi)
0x6C0763E0,	//0x05da		VoC_bez16_d(CVSD_DEC_LOWPASS_filter1,0x63e4)(lo)	|	VoC_lw32_d(ACC1,0x63e0)(hi)
0x0A8663E4,	//0x05dc		VoC_lw16i(REG6,0x1)(lo)	|	VoC_bez16_d(CVSD_DEC_LOWPASS_filter1,0x63e4)(hi)
0x42300001,	//0x05de		VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_lw16i(REG6,0x1)(hi)
0xFFC0F685,	//0x05e0		VoC_NAD	|	VoC_movreg16(REG5,REG4,IN_PARALLEL)
		//0x05e2		CVSD_DEC_LOWPASS_filter1
0x64060E20,	//0x05e2		VoC_mac32_rd(REG4,0x6406)
0x7FC0D99B,	//0x05e4		VoC_NOP	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0xDCB4D16A,	//0x05e6		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)
0x64070E30,	//0x05e8		VoC_mac32_rd(REG6,0x6407)
0x7FC0DCB5,	//0x05ea		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x05ec		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x05ee		VoC_mac32_rd(REG4,0x6408)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76408,	//0x05f0		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6408)(hi)
0xD16A7FC0,	//0x05f2		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x05f4		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64090E30,	//0x05f6		VoC_mac32_rd(REG6,0x6409)
0x7FC0DCB5,	//0x05f8		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x05fa		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x05fc		VoC_mac32_rd(REG4,0x640a)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB7640A,	//0x05fe		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x640a)(hi)
0xD16A7FC0,	//0x0600		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x0602		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x640B0E30,	//0x0604		VoC_mac32_rd(REG6,0x640b)
0x7FC0DCB5,	//0x0606		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x0608		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x060a		VoC_mac32_rd(REG4,0x640c)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB7640C,	//0x060c		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x640c)(hi)
0xD16A7FC0,	//0x060e		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x0610		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x640D0E30,	//0x0612		VoC_mac32_rd(REG6,0x640d)
0x7FC0DCB5,	//0x0614		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x0616		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x0618		VoC_mac32_rd(REG4,0x640e)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB7640E,	//0x061a		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x640e)(hi)
0xD16A7FC0,	//0x061c		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x061e		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x640F0E30,	//0x0620		VoC_mac32_rd(REG6,0x640f)
0x7FC0DCB5,	//0x0622		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x0624		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x0626		VoC_mac32_rd(REG4,0x6410)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76410,	//0x0628		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6410)(hi)
0xD16A7FC0,	//0x062a		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x062c		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64110E30,	//0x062e		VoC_mac32_rd(REG6,0x6411)
0x7FC0DCB5,	//0x0630		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x0632		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x0634		VoC_mac32_rd(REG4,0x6412)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76412,	//0x0636		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6412)(hi)
0xD16A7FC0,	//0x0638		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x063a		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64130E30,	//0x063c		VoC_mac32_rd(REG6,0x6413)
0x7FC0DCB5,	//0x063e		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x0640		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x0642		VoC_mac32_rd(REG4,0x6414)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76414,	//0x0644		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6414)(hi)
0xD16A7FC0,	//0x0646		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x0648		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64150E30,	//0x064a		VoC_mac32_rd(REG6,0x6415)
0x7FC0DCB5,	//0x064c		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x064e		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x0650		VoC_mac32_rd(REG4,0x6416)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76416,	//0x0652		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6416)(hi)
0xD16A7FC0,	//0x0654		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x0656		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64170E30,	//0x0658		VoC_mac32_rd(REG6,0x6417)
0x7FC0DCB5,	//0x065a		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x065c		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x065e		VoC_mac32_rd(REG4,0x6418)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76418,	//0x0660		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6418)(hi)
0xD16A7FC0,	//0x0662		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x0664		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64190E30,	//0x0666		VoC_mac32_rd(REG6,0x6419)
0x7FC0DCB5,	//0x0668		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x066a		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x066c		VoC_mac32_rd(REG4,0x641a)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB7641A,	//0x066e		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x641a)(hi)
0xD16A7FC0,	//0x0670		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xFF42FA64,	//0x0672		VoC_lw32z(REG45,DEFAULT)	|	VoC_shr32_ri(ACC0,0xc,DEFAULT)
0x067A33C4,	//0x0674		VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE100,ACC0)
0x0A85CAA4,	//0x0676		VoC_lw16i(REG5,0x1)(lo)	|	VoC_sub32_rr(ACC0,REG45,ACC0,DEFAULT)
0xFFC00001,	//0x0678		VoC_NAD	|	VoC_lw16i(REG5,0x1)(hi)
		//0x067a		LOWPASS_LIMIT_POSTIVE_VALUE100
0x7FFF0A87,	//0x067a		VoC_lw16i(REG7,0x7fff)
0x3623FC83,	//0x067c		VoC_bgt32_rr(LOWPASS_LIMIT_VALUE100,ACC0,REG67)(lo)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0xFF230680,	//0x067e		VoC_movreg32(REG67,ACC0,DEFAULT)	|	VoC_bgt32_rr(LOWPASS_LIMIT_VALUE100,ACC0,REG67)(hi)
		//0x0680		LOWPASS_LIMIT_VALUE100
0x06863185,	//0x0680		VoC_bez16_r(LOWPASS_LIMIT_POSTIVE_VALUE110,REG5)
0x00000A85,	//0x0682		VoC_lw16i(REG5,0x0)
0xFFC04376,	//0x0684		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG5,REG6,DEFAULT)
		//0x0686		LOWPASS_LIMIT_POSTIVE_VALUE110
0x641C0836,	//0x0686		VoC_mult16_rd(REG6,REG6,0x641c)
0x00150A84,	//0x0688		VoC_lw16i(REG4,0x15)
0x5C96FFC0,	//0x068a		VoC_sw16inc_p(REG6,REG1,DEFAULT)	|	VoC_NOP
0xFA65C0A2,	//0x068c		VoC_shr32_ri(ACC1,0xc,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,IN_PARALLEL)
0x33C5FF42,	//0x068e		VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE101,ACC1)(lo)	|	VoC_lw32z(REG45,DEFAULT)
0xCAAD0694,	//0x0690		VoC_sub32_rr(ACC1,REG45,ACC1,DEFAULT)	|	VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE101,ACC1)(hi)
0x00010A85,	//0x0692		VoC_lw16i(REG5,0x1)
		//0x0694		LOWPASS_LIMIT_POSTIVE_VALUE101
0x7FFF0A87,	//0x0694		VoC_lw16i(REG7,0x7fff)
0x362BFC83,	//0x0696		VoC_bgt32_rr(LOWPASS_LIMIT_VALUE101,ACC1,REG67)(lo)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0xFF2B069A,	//0x0698		VoC_movreg32(REG67,ACC1,DEFAULT)	|	VoC_bgt32_rr(LOWPASS_LIMIT_VALUE101,ACC1,REG67)(hi)
		//0x069a		LOWPASS_LIMIT_VALUE101
0x06A03185,	//0x069a		VoC_bez16_r(LOWPASS_LIMIT_POSTIVE_VALUE111,REG5)
0x00000A85,	//0x069c		VoC_lw16i(REG5,0x0)
0xFFC04376,	//0x069e		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG5,REG6,DEFAULT)
		//0x06a0		LOWPASS_LIMIT_POSTIVE_VALUE111
0x641C0836,	//0x06a0		VoC_mult16_rd(REG6,REG6,0x641c)
0x00280A84,	//0x06a2		VoC_lw16i(REG4,0x28)
0x5C96FFC0,	//0x06a4		VoC_sw16inc_p(REG6,REG1,DEFAULT)	|	VoC_NOP
		//0x06a5		VoC_endloop0
0xDFA9C2E3,	//0x06a6		VoC_pop16(RA,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG4,IN_PARALLEL)
0xE580FFC0,	//0x06a8		VoC_return	|	VoC_NOP
		//0x06aa		CVSD_LowPass_Filter2
0x701ADFE9,	//0x06aa		VoC_lw16i_short(FORMATX,0x0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x2C08F401,	//0x06ac		VoC_loop_i(0x0,0x4)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xD884071D,	//0x06ae		VoC_lw16inc_p(REG4,REG0,DEFAULT)	|	VoC_loop_i(0x0,0x4)(hi)
0x1484D885,	//0x06b0		VoC_lw32_d(ACC0,0x63e0)(lo)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x148563E0,	//0x06b2		VoC_lw32_d(ACC1,0x63e0)(lo)	|	VoC_lw32_d(ACC0,0x63e0)(hi)
0x6C0763E0,	//0x06b4		VoC_bez16_d(CVSD_DEC_LOWPASS_filter2,0x63e4)(lo)	|	VoC_lw32_d(ACC1,0x63e0)(hi)
0x0A8663E4,	//0x06b6		VoC_lw16i(REG6,0x1)(lo)	|	VoC_bez16_d(CVSD_DEC_LOWPASS_filter2,0x63e4)(hi)
0x42300001,	//0x06b8		VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_lw16i(REG6,0x1)(hi)
0xFFC0F685,	//0x06ba		VoC_NAD	|	VoC_movreg16(REG5,REG4,IN_PARALLEL)
		//0x06bc		CVSD_DEC_LOWPASS_filter2
0x63FF0E20,	//0x06bc		VoC_mac32_rd(REG4,0x63ff)
0x7FC0D99B,	//0x06be		VoC_NOP	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0xDCB4D16A,	//0x06c0		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)
0x64000E30,	//0x06c2		VoC_mac32_rd(REG6,0x6400)
0x7FC0DCB5,	//0x06c4		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x06c6		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x06c8		VoC_mac32_rd(REG4,0x6401)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76401,	//0x06ca		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6401)(hi)
0xD16A7FC0,	//0x06cc		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x06ce		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64020E30,	//0x06d0		VoC_mac32_rd(REG6,0x6402)
0x7FC0DCB5,	//0x06d2		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x06d4		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x06d6		VoC_mac32_rd(REG4,0x6403)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76403,	//0x06d8		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6403)(hi)
0xD16A7FC0,	//0x06da		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x06dc		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x64040E30,	//0x06de		VoC_mac32_rd(REG6,0x6404)
0x7FC0DCB5,	//0x06e0		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x06e2		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x06e4		VoC_mac32_rd(REG4,0x6405)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB76405,	//0x06e6		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x6405)(hi)
0xD16A7FC0,	//0x06e8		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xFF42FA64,	//0x06ea		VoC_lw32z(REG45,DEFAULT)	|	VoC_shr32_ri(ACC0,0xc,DEFAULT)
0x06F233C4,	//0x06ec		VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE200,ACC0)
0x0A85CAA4,	//0x06ee		VoC_lw16i(REG5,0x1)(lo)	|	VoC_sub32_rr(ACC0,REG45,ACC0,DEFAULT)
0xFFC00001,	//0x06f0		VoC_NAD	|	VoC_lw16i(REG5,0x1)(hi)
		//0x06f2		LOWPASS_LIMIT_POSTIVE_VALUE200
0x7FFF0A87,	//0x06f2		VoC_lw16i(REG7,0x7fff)
0x3623FC83,	//0x06f4		VoC_bgt32_rr(LOWPASS_LIMIT_VALUE200,ACC0,REG67)(lo)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0xFF2306F8,	//0x06f6		VoC_movreg32(REG67,ACC0,DEFAULT)	|	VoC_bgt32_rr(LOWPASS_LIMIT_VALUE200,ACC0,REG67)(hi)
		//0x06f8		LOWPASS_LIMIT_VALUE200
0x06FE3185,	//0x06f8		VoC_bez16_r(LOWPASS_LIMIT_POSTIVE_VALUE210,REG5)
0x00000A85,	//0x06fa		VoC_lw16i(REG5,0x0)
0xFFC04376,	//0x06fc		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG5,REG6,DEFAULT)
		//0x06fe		LOWPASS_LIMIT_POSTIVE_VALUE210
0x641D0836,	//0x06fe		VoC_mult16_rd(REG6,REG6,0x641d)
0x00070A84,	//0x0700		VoC_lw16i(REG4,0x7)
0x5C96FFC0,	//0x0702		VoC_sw16inc_p(REG6,REG1,DEFAULT)	|	VoC_NOP
0xFA65C0A2,	//0x0704		VoC_shr32_ri(ACC1,0xc,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,IN_PARALLEL)
0x33C5FF42,	//0x0706		VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE201,ACC1)(lo)	|	VoC_lw32z(REG45,DEFAULT)
0xCAAD070C,	//0x0708		VoC_sub32_rr(ACC1,REG45,ACC1,DEFAULT)	|	VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE201,ACC1)(hi)
0x00010A85,	//0x070a		VoC_lw16i(REG5,0x1)
		//0x070c		LOWPASS_LIMIT_POSTIVE_VALUE201
0x7FFF0A87,	//0x070c		VoC_lw16i(REG7,0x7fff)
0x362BFC83,	//0x070e		VoC_bgt32_rr(LOWPASS_LIMIT_VALUE201,ACC1,REG67)(lo)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0xFF2B0712,	//0x0710		VoC_movreg32(REG67,ACC1,DEFAULT)	|	VoC_bgt32_rr(LOWPASS_LIMIT_VALUE201,ACC1,REG67)(hi)
		//0x0712		LOWPASS_LIMIT_VALUE201
0x07183185,	//0x0712		VoC_bez16_r(LOWPASS_LIMIT_POSTIVE_VALUE211,REG5)
0x00000A85,	//0x0714		VoC_lw16i(REG5,0x0)
0xFFC04376,	//0x0716		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG5,REG6,DEFAULT)
		//0x0718		LOWPASS_LIMIT_POSTIVE_VALUE211
0x641D0836,	//0x0718		VoC_mult16_rd(REG6,REG6,0x641d)
0x000C0A84,	//0x071a		VoC_lw16i(REG4,0xc)
0x5C96FFC0,	//0x071c		VoC_sw16inc_p(REG6,REG1,DEFAULT)	|	VoC_NOP
		//0x071d		VoC_endloop0
0xDFA9C2E3,	//0x071e		VoC_pop16(RA,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG4,IN_PARALLEL)
0xE580FFC0,	//0x0720		VoC_return	|	VoC_NOP
		//0x0722		CVSD_LowPass_Filter3
0x701ADFE9,	//0x0722		VoC_lw16i_short(FORMATX,0x0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x2C10F401,	//0x0724		VoC_loop_i(0x0,0x8)(lo)	|	VoC_lw16i_short(FORMAT32,0x0,IN_PARALLEL)
0xD8840787,	//0x0726		VoC_lw16inc_p(REG4,REG0,DEFAULT)	|	VoC_loop_i(0x0,0x8)(hi)
0x1484D885,	//0x0728		VoC_lw32_d(ACC0,0x63e0)(lo)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0x148563E0,	//0x072a		VoC_lw32_d(ACC1,0x63e0)(lo)	|	VoC_lw32_d(ACC0,0x63e0)(hi)
0x6C0763E0,	//0x072c		VoC_bez16_d(CVSD_DEC_LOWPASS_filter3,0x63e4)(lo)	|	VoC_lw32_d(ACC1,0x63e0)(hi)
0x0A8663E4,	//0x072e		VoC_lw16i(REG6,0x1)(lo)	|	VoC_bez16_d(CVSD_DEC_LOWPASS_filter3,0x63e4)(hi)
0x42300001,	//0x0730		VoC_sub16_rr(REG0,REG0,REG6,DEFAULT)	|	VoC_lw16i(REG6,0x1)(hi)
0xFFC0F685,	//0x0732		VoC_NAD	|	VoC_movreg16(REG5,REG4,IN_PARALLEL)
		//0x0734		CVSD_DEC_LOWPASS_filter3
0x63FA0E20,	//0x0734		VoC_mac32_rd(REG4,0x63fa)
0x7FC0D99B,	//0x0736		VoC_NOP	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0xDCB4D16A,	//0x0738		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)
0x63FB0E30,	//0x073a		VoC_mac32_rd(REG6,0x63fb)
0x7FC0DCB5,	//0x073c		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x073e		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x0740		VoC_mac32_rd(REG4,0x63fc)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB763FC,	//0x0742		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x63fc)(hi)
0xD16A7FC0,	//0x0744		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xDCB4D99B,	//0x0746		VoC_sw16inc_p(REG4,REG3,DEFAULT)	|	VoC_lw32_p(REG67,REG3,DEFAULT)
0x63FD0E30,	//0x0748		VoC_mac32_rd(REG6,0x63fd)
0x7FC0DCB5,	//0x074a		VoC_NOP	|	VoC_sw16inc_p(REG5,REG3,DEFAULT)
0xD99AD17A,	//0x074c		VoC_lw32_p(REG45,REG3,DEFAULT)	|	VoC_macXinc_rp(REG7,REG2,IN_PARALLEL)
0x0E20DCB6,	//0x074e		VoC_mac32_rd(REG4,0x63fe)(lo)	|	VoC_sw16inc_p(REG6,REG3,DEFAULT)
0xDCB763FE,	//0x0750		VoC_sw16inc_p(REG7,REG3,DEFAULT)	|	VoC_mac32_rd(REG4,0x63fe)(hi)
0xD16A7FC0,	//0x0752		VoC_macXinc_rp(REG5,REG2,IN_PARALLEL)	|	VoC_NOP
0xFF42FA64,	//0x0754		VoC_lw32z(REG45,DEFAULT)	|	VoC_shr32_ri(ACC0,0xc,DEFAULT)
0x075C33C4,	//0x0756		VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE300,ACC0)
0x0A85CAA4,	//0x0758		VoC_lw16i(REG5,0x1)(lo)	|	VoC_sub32_rr(ACC0,REG45,ACC0,DEFAULT)
0xFFC00001,	//0x075a		VoC_NAD	|	VoC_lw16i(REG5,0x1)(hi)
		//0x075c		LOWPASS_LIMIT_POSTIVE_VALUE300
0x7FFF0A87,	//0x075c		VoC_lw16i(REG7,0x7fff)
0x3623FC83,	//0x075e		VoC_bgt32_rr(LOWPASS_LIMIT_VALUE300,ACC0,REG67)(lo)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0xFF230762,	//0x0760		VoC_movreg32(REG67,ACC0,DEFAULT)	|	VoC_bgt32_rr(LOWPASS_LIMIT_VALUE300,ACC0,REG67)(hi)
		//0x0762		LOWPASS_LIMIT_VALUE300
0x07683185,	//0x0762		VoC_bez16_r(LOWPASS_LIMIT_POSTIVE_VALUE310,REG5)
0x00000A85,	//0x0764		VoC_lw16i(REG5,0x0)
0xFFC04376,	//0x0766		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG5,REG6,DEFAULT)
		//0x0768		LOWPASS_LIMIT_POSTIVE_VALUE310
0x641E0836,	//0x0768		VoC_mult16_rd(REG6,REG6,0x641e)
0x00050A84,	//0x076a		VoC_lw16i(REG4,0x5)
0x5C96FFC0,	//0x076c		VoC_sw16inc_p(REG6,REG1,DEFAULT)	|	VoC_NOP
0xFA65C0A2,	//0x076e		VoC_shr32_ri(ACC1,0xc,DEFAULT)	|	VoC_add16_rr(REG2,REG2,REG4,IN_PARALLEL)
0x33C5FF42,	//0x0770		VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE301,ACC1)(lo)	|	VoC_lw32z(REG45,DEFAULT)
0xCAAD0776,	//0x0772		VoC_sub32_rr(ACC1,REG45,ACC1,DEFAULT)	|	VoC_bnltz32_r(LOWPASS_LIMIT_POSTIVE_VALUE301,ACC1)(hi)
0x00010A85,	//0x0774		VoC_lw16i(REG5,0x1)
		//0x0776		LOWPASS_LIMIT_POSTIVE_VALUE301
0x7FFF0A87,	//0x0776		VoC_lw16i(REG7,0x7fff)
0x362BFC83,	//0x0778		VoC_bgt32_rr(LOWPASS_LIMIT_VALUE301,ACC1,REG67)(lo)	|	VoC_shru32_ri(REG67,0x10,DEFAULT)
0xFF2B077C,	//0x077a		VoC_movreg32(REG67,ACC1,DEFAULT)	|	VoC_bgt32_rr(LOWPASS_LIMIT_VALUE301,ACC1,REG67)(hi)
		//0x077c		LOWPASS_LIMIT_VALUE301
0x07823185,	//0x077c		VoC_bez16_r(LOWPASS_LIMIT_POSTIVE_VALUE311,REG5)
0x00000A85,	//0x077e		VoC_lw16i(REG5,0x0)
0xFFC04376,	//0x0780		VoC_NAD(IN_PARALLEL)	|	VoC_sub16_rr(REG6,REG5,REG6,DEFAULT)
		//0x0782		LOWPASS_LIMIT_POSTIVE_VALUE311
0x641E0836,	//0x0782		VoC_mult16_rd(REG6,REG6,0x641e)
0x00080A84,	//0x0784		VoC_lw16i(REG4,0x8)
0x5C96FFC0,	//0x0786		VoC_sw16inc_p(REG6,REG1,DEFAULT)	|	VoC_NOP
		//0x0787		VoC_endloop0
0xDFA9C2E3,	//0x0788		VoC_pop16(RA,DEFAULT)	|	VoC_sub16_rr(REG3,REG3,REG4,IN_PARALLEL)
0xE580FFC0,	//0x078a		VoC_return	|	VoC_NOP
		//0x078c		CVSD_encode
0x7002DFE9,	//0x078c		VoC_lw16i_short(REG2,0x0,DEFAULT)	|	VoC_push16(RA,DEFAULT)
0x1407E013,	//0x078e		VoC_lw16_d(REG7,0x63f6)(lo)	|	VoC_lw16i_short(REG3,0x1,IN_PARALLEL)
0xFFC063F6,	//0x0790		VoC_NAD	|	VoC_lw16_d(REG7,0x63f6)(hi)
0x07E62C20,	//0x0792		VoC_loop_i(0x0,0x10)
0x00000A84,	//0x0794		VoC_lw16i(REG4,0x0)
0x79FFD885,	//0x0796		VoC_shru16_ri(REG7,0xffffffff,DEFAULT)	|	VoC_lw16inc_p(REG5,REG0,DEFAULT)
0xFA32F90A,	//0x0798		VoC_shr32_ri(REG45,0x6,DEFAULT)	|	VoC_shru16_ri(REG2,0x1,IN_PARALLEL)
0x00010A86,	//0x079a		VoC_lw16i(REG6,0x1)
0x63F20992,	//0x079c		VoC_sub32_rd(REG45,REG45,0x63f2)
0x07A633C2,	//0x079e		VoC_bnltz32_r(csdv_b0_e_1,REG45)
0x00011687,	//0x07a0		VoC_or16_ri(REG7,0x1)
0x000016C2,	//0x07a2		VoC_or16_ri(REG2,0x8000)
0x00000A86,	//0x07a4		VoC_lw16i(REG6,0x0)
		//0x07a6		csdv_b0_e_1
0x641B2807,	//0x07a6		VoC_and16_rd(REG7,0x641b)
0x63E61482,	//0x07a8		VoC_lw32_d(REG45,0x63e6)
0x63F61507,	//0x07aa		VoC_sw16_d(REG7,0x63f6)
0x07BC3187,	//0x07ac		VoC_bez16_r(cvsd_alpha_eq_1,REG7)
0x641B40B7,	//0x07ae		VoC_be16_rd(cvsd_alpha_eq_1,REG7,0x641b)
0x0B92FA52,	//0x07b0		VoC_sub32_dr(REG45,0x63e6,REG45)(lo)	|	VoC_shr32_ri(REG45,0xa,DEFAULT)
0x148463E6,	//0x07b2		VoC_lw32_d(ACC0,0x63ea)(lo)	|	VoC_sub32_dr(REG45,0x63e6,REG45)(hi)
0x158263EA,	//0x07b4		VoC_sw32_d(REG45,0x63e6)(lo)	|	VoC_lw32_d(ACC0,0x63ea)(hi)
0x361463E6,	//0x07b6		VoC_bgt32_rr(cvsd_alpha_judge_end,REG45,ACC0)(lo)	|	VoC_sw32_d(REG45,0x63e6)(hi)
0x158407C6,	//0x07b8		VoC_sw32_d(ACC0,0x63e6)(lo)	|	VoC_bgt32_rr(cvsd_alpha_judge_end,REG45,ACC0)(hi)
0xE5CB63E6,	//0x07ba		VoC_jump(cvsd_alpha_judge_end)	|	VoC_sw32_d(ACC0,0x63e6)(hi)
		//0x07bc		cvsd_alpha_eq_1
0x63EA0912,	//0x07bc		VoC_add32_rd(REG45,REG45,0x63ea)
0x63EC1484,	//0x07be		VoC_lw32_d(ACC0,0x63ec)
0x63E61582,	//0x07c0		VoC_sw32_d(REG45,0x63e6)
0x07C63622,	//0x07c2		VoC_bgt32_rr(cvsd_alpha_judge_end,ACC0,REG45)
0x63E61584,	//0x07c4		VoC_sw32_d(ACC0,0x63e6)
		//0x07c6		cvsd_alpha_judge_end
0x63F86E08,	//0x07c6		VoC_bnez16_d(cvsd_not_first_frame_1,0x63f8)
0x1503FF42,	//0x07c8		VoC_sw16_d(REG3,0x63f8)(lo)	|	VoC_lw32z(REG45,DEFAULT)
0x158263F8,	//0x07ca		VoC_sw32_d(REG45,0x63f2)(lo)	|	VoC_sw16_d(REG3,0x63f8)(hi)
0xE5D963F2,	//0x07cc		VoC_jump(cvsd_xest_judge_end)	|	VoC_sw32_d(REG45,0x63f2)(hi)
		//0x07ce		cvsd_not_first_frame_1
0x63F21482,	//0x07ce		VoC_lw32_d(REG45,0x63f2)
0x63E61484,	//0x07d0		VoC_lw32_d(ACC0,0x63e6)
0x07D63186,	//0x07d2		VoC_bez16_r(csdv_encode_b0_e_0,REG6)
0xE5C3C8A2,	//0x07d4		VoC_jump(csdv_encode_b0_e_end)	|	VoC_add32_rr(REG45,REG45,ACC0,DEFAULT)
		//0x07d6		csdv_encode_b0_e_0
0xFFC04AA2,	//0x07d6		VoC_NAD(IN_PARALLEL)	|	VoC_sub32_rr(REG45,REG45,ACC0,DEFAULT)
		//0x07d8		csdv_encode_b0_e_end
0x63EE5022,	//0x07d8		VoC_bgt32_rd(csdv_encode_y_e_min,REG45,0x63ee)
0x63EE1482,	//0x07da		VoC_lw32_d(REG45,0x63ee)
		//0x07dc		csdv_encode_y_e_min
0x63F06022,	//0x07dc		VoC_blt32_rd(csdv_encode_y_e_max,REG45,0x63f0)
0x63F01482,	//0x07de		VoC_lw32_d(REG45,0x63f0)
		//0x07e0		csdv_encode_y_e_max
0xFA2CFF14,	//0x07e0		VoC_shr32_ri(ACC0,0x5,DEFAULT)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0xFFC0CAA2,	//0x07e2		VoC_NOP	|	VoC_sub32_rr(REG45,REG45,ACC0,DEFAULT)
0x63F21582,	//0x07e4		VoC_sw32_d(REG45,0x63f2)
		//0x07e6		cvsd_xest_judge_end
		//0x07e6		VoC_endloop0
0xDC92FFC0,	//0x07e6		VoC_sw16inc_p(REG2,REG1,DEFAULT)	|	VoC_NOP
0xFFC0DFA9,	//0x07e8		VoC_NOP	|	VoC_pop16(RA,DEFAULT)
0xDFE9E580,	//0x07ea		VoC_push16(RA,DEFAULT)	|	VoC_return
		//0x07eb		CVSD_decode
0x1407D882,	//0x07ec		VoC_lw16_d(REG7,0x63f7)(lo)	|	VoC_lw16inc_p(REG2,REG0,DEFAULT)
0x2C2063F7,	//0x07ee		VoC_loop_i(0x0,0x10)(lo)	|	VoC_lw16_d(REG7,0x63f7)(hi)
0xE046083C,	//0x07f0		VoC_movreg16(REG6,REG2,DEFAULT)	|	VoC_loop_i(0x0,0x10)(hi)
0x00011606,	//0x07f2		VoC_and16_ri(REG6,0x1)
0xF9FF790A,	//0x07f4		VoC_shru16_ri(REG7,0xffffffff,IN_PARALLEL)	|	VoC_shru16_ri(REG2,0x1,DEFAULT)
0x00000A84,	//0x07f6		VoC_lw16i(REG4,0x0)
0x2807E477,	//0x07f8		VoC_and16_rd(REG7,0x641b)(lo)	|	VoC_or16_rr(REG7,REG6,DEFAULT)
0x1482641B,	//0x07fa		VoC_lw32_d(REG45,0x63e8)(lo)	|	VoC_and16_rd(REG7,0x641b)(hi)
0x150763E8,	//0x07fc		VoC_sw16_d(REG7,0x63f7)(lo)	|	VoC_lw32_d(REG45,0x63e8)(hi)
0x318763F7,	//0x07fe		VoC_bez16_r(cvsd_dec_alpha_eq_1,REG7)(lo)	|	VoC_sw16_d(REG7,0x63f7)(hi)
0x40BF0810,	//0x0800		VoC_be16_rd(cvsd_dec_alpha_eq_1,REG7,0x641b)(lo)	|	VoC_bez16_r(cvsd_dec_alpha_eq_1,REG7)(hi)
0xFA52641B,	//0x0802		VoC_shr32_ri(REG45,0xa,DEFAULT)	|	VoC_be16_rd(cvsd_dec_alpha_eq_1,REG7,0x641b)(hi)
0x63E80B92,	//0x0804		VoC_sub32_dr(REG45,0x63e8,REG45)
0x63EA1484,	//0x0806		VoC_lw32_d(ACC0,0x63ea)
0x63E81582,	//0x0808		VoC_sw32_d(REG45,0x63e8)
0x081A3614,	//0x080a		VoC_bgt32_rr(cvsd_dec_alpha_judge_end,REG45,ACC0)
0x63E81584,	//0x080c		VoC_sw32_d(ACC0,0x63e8)
0xFFC065CC,	//0x080e		VoC_NAD(IN_PARALLEL)	|	VoC_jump(cvsd_dec_alpha_judge_end)
		//0x0810		cvsd_dec_alpha_eq_1
0x63EA0912,	//0x0810		VoC_add32_rd(REG45,REG45,0x63ea)
0x63EC1484,	//0x0812		VoC_lw32_d(ACC0,0x63ec)
0x63E81582,	//0x0814		VoC_sw32_d(REG45,0x63e8)
0x081A3622,	//0x0816		VoC_bgt32_rr(cvsd_dec_alpha_judge_end,ACC0,REG45)
0x63E81584,	//0x0818		VoC_sw32_d(ACC0,0x63e8)
		//0x081a		cvsd_dec_alpha_judge_end
0x63F41482,	//0x081a		VoC_lw32_d(REG45,0x63f4)
0x63E81484,	//0x081c		VoC_lw32_d(ACC0,0x63e8)
0x082231C6,	//0x081e		VoC_bnez16_r(csdv_decode_b0_e_0,REG6)
0xE5C3C8A2,	//0x0820		VoC_jump(csdv_decode_b0_e_end)	|	VoC_add32_rr(REG45,REG45,ACC0,DEFAULT)
		//0x0822		csdv_decode_b0_e_0
0xFFC04AA2,	//0x0822		VoC_NAD(IN_PARALLEL)	|	VoC_sub32_rr(REG45,REG45,ACC0,DEFAULT)
		//0x0824		csdv_decode_b0_e_end
0x63EE5022,	//0x0824		VoC_bgt32_rd(csdv_decode_y_e_min,REG45,0x63ee)
0x63EE1482,	//0x0826		VoC_lw32_d(REG45,0x63ee)
		//0x0828		csdv_decode_y_e_min
0x63F06022,	//0x0828		VoC_blt32_rd(csdv_decode_y_e_max,REG45,0x63f0)
0x63F01482,	//0x082a		VoC_lw32_d(REG45,0x63f0)
		//0x082c		csdv_decode_y_e_max
0xFA2CFF14,	//0x082c		VoC_shr32_ri(ACC0,0x5,DEFAULT)	|	VoC_movreg32(ACC0,REG45,DEFAULT)
0xFFC0CAA2,	//0x082e		VoC_NOP	|	VoC_sub32_rr(REG45,REG45,ACC0,DEFAULT)
0x63F41582,	//0x0830		VoC_sw32_d(REG45,0x63f4)
0x08383282,	//0x0832		VoC_bgtz32_r(csdv_decode_x_g_round,REG45)
0x63E20992,	//0x0834		VoC_sub32_rd(REG45,REG45,0x63e2)
0xFFC065C4,	//0x0836		VoC_NAD(IN_PARALLEL)	|	VoC_jump(csdv_decode_x_g_round_end)
		//0x0838		csdv_decode_x_g_round
0x63E20912,	//0x0838		VoC_add32_rd(REG45,REG45,0x63e2)
		//0x083a		csdv_decode_x_g_round_end
0xFFC0FA52,	//0x083a		VoC_NOP	|	VoC_shr32_ri(REG45,0xa,DEFAULT)
		//0x083b		cvsd_dec_xest_judge_end
		//0x083c		VoC_endloop0
0xDFA9DC94,	//0x083c		VoC_pop16(RA,DEFAULT)	|	VoC_sw16inc_p(REG4,REG1,DEFAULT)
0xE580FFC0,	//0x083e		VoC_return	|	VoC_NOP
