#include "stdafx.h"
#include "Simulator.h"
#include "cswtype.h"
#include "gui.h"

#if APP_SUPPORT_LED8S==1   // 8 ∂Œ ˝¬Îπ‹œ‘ æ

/*
col: ___        1
    |   |     0   3
     ___        2
    |   |     4   5
     ___        6
*/
#define LED8S_BIT0	0x01
#define LED8S_BIT1	0x02
#define LED8S_BIT2	0x04
#define LED8S_BIT3	0x08
#define LED8S_BIT4	0x10
#define LED8S_BIT5	0x20
#define LED8S_BIT6	0x40
#define LED8S_BIT7	0x80

typedef struct {
    int id;
    int x;
    int y;
    int width;
    int height;
    BYTE data[32];
} led_icon_t;


const led_icon_t icons[] = {
   {GUI_ICON_MUSIC, 112, 0, 16, 16,
      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0xe6,0xc6,0x99,0xaa,0x91,0xaa,0x96,
       0x92,0xe1,0x82,0x81,0x82,0x89,0x82,0x86,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
   {GUI_ICON_FM, 112, 16, 16, 16,
      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x82,0x80,0xc6,0x80,0xaa,0xf0,0xaa,
       0x80,0x92,0x80,0x82,0x80,0x82,0x80,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
   {GUI_ICON_RECORD, 112, 32, 16, 16,
      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf3,0xce,0x8a,0x11,0x8a,0x10,0xf3,0x90,
       0xa2,0x10,0x92,0x11,0x8b,0xce,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
   {GUI_ICON_BLUETOOTH, 112, 48, 16, 16,
      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf1,0xfc,0x88,0x20,0x88,0x20,0xf0,0x20,
       0x88,0x20,0x88,0x20,0x88,0x20,0xf0,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},

   {GUI_ICON_PLAY, 0, 0, 16, 16,
      {0x00,0x00,0x00,0x00,0x08,0x00,0x0c,0x00,0x0e,0x00,0x0f,0x00,0x0f,0x80,0x0f,0xc0,
       0x0f,0xe0,0x0f,0xc0,0x0f,0x80,0x0f,0x00,0x0e,0x00,0x0c,0x00,0x08,0x00,0x00,0x00}},
   {GUI_ICON_PAUSE, 0, 16, 16, 16,
      {0x00,0x00,0x00,0x00,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,
       0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x0c,0x30,0x00,0x00,0x00,0x00,0x00,0x00}},
   {GUI_ICON_SD, 0, 32, 16, 16,
      {0x00,0x00,0x00,0x00,0x38,0xf8,0x44,0x84,0x80,0x82,0x80,0x82,0x40,0x82,0x20,0x82,
       0x10,0x82,0x08,0x82,0x04,0x82,0x04,0x82,0x88,0x84,0x70,0xf8,0x00,0x00,0x00,0x00}},
   {GUI_ICON_USB, 0, 48, 16, 16,
      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x89,0x9e,0x8a,0x51,0x8a,0x11,0x89,0x1e,
       0x88,0x91,0x88,0x51,0x8a,0x51,0x71,0x9e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},

   {GUI_ICON_COLON, 62, 24, 8, 16,
      {0xe0,0xe0,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0xe0,0xe0}},
   {GUI_ICON_DECPOINT, 84, 48, 8, 4,
      {0xe0,0xe0,0xe0,0x00}},

};

const led_icon_t bits[] = {
   {LED8S_BIT0, 0, 0, 8, 16,
      {0x00,0x00,0x20,0x30,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x30,0x20,0x00}},
   {LED8S_BIT1, 3, 0, 16, 4,
      {0xff,0xff,0x7f,0xfe,0x3f,0xfc,0x00,0x00}},
   {LED8S_BIT2, 3, 14, 16, 4,
      {0x3f,0xfc,0x7f,0xfe,0x3f,0xfc,0x00,0x00}},
   {LED8S_BIT3, 14, 0, 8, 16,
      {0x00,0x00,0x08,0x18,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x18,0x08,0x00}},
   {LED8S_BIT4, 0, 14, 8, 16,
      {0x00,0x00,0x20,0x30,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x30,0x20,0x00}},
   {LED8S_BIT5, 14, 14, 8, 16,
      {0x00,0x00,0x08,0x18,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x18,0x08,0x00}},
   {LED8S_BIT6, 3, 28, 16, 4,
      {0x3f,0xfc,0x7f,0xfe,0xff,0xff,0x00,0x00}},
};

const UINT led8_pos[4] = {20, 40, 65, 85};
const UINT led8_height = 16;

void DrawLed8S(UINT32 width, UINT32 heigth, UINT16 flag, UINT8* Data, UINT32* buff, UINT32 color, UINT32 bkcolor)
{
  UINT32 x,y,i,j,x1,y1,c;

  for(y=0;y<heigth;y++)
    for(x=0;x<width;x++)
    {
        buff[(heigth-1-y)*width+x] = bkcolor;
    }

  for(i=0; i<sizeof(icons)/sizeof(icons[0]); i++)
    if(flag&icons[i].id)
    {
        for(x=icons[i].x,x1=0;x1<icons[i].width;x1++,x++)
            for(y=icons[i].y,y1=0;y1<icons[i].height;y1++,y++)
            {
                if(icons[i].data[((y1*icons[i].width+x1)/8)]&(1<<(7-(x1&7))))
                    buff[(heigth-1-y)*width+x] = color;
            }
    }
  for(i=0;i<4;i++)
    {
        c = Data[i];
        for(j=0;j<sizeof(bits)/sizeof(bits[0]); j++)
        {
            if(c&bits[j].id)
            {
                for(x=led8_pos[i]+bits[j].x,x1=0;x1<bits[j].width;x1++,x++)
                    for(y=led8_height+bits[j].y,y1=0;y1<bits[j].height;y1++,y++)
                    {
                        if(bits[j].data[((y1*bits[j].width+x1)/8)]&(1<<(7-(x1&7))))
                            buff[(heigth-1-y)*width+x] = color;
                    }
            }
        }
    }
}


#endif

